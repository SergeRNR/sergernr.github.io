/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var l=s(t),m=s(n),g=0;g<a.length;++g){var y=a[g];if(!(i[y]||r&&r[y]||m&&m[y]||l&&l[y])){var v=f(n,y);try{u(t,y,v)}catch(e){}}}}return t}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,s=o(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(s[c]=a[c]);if(t){l=t(a);for(var d=0;d<l.length;d++)r.call(a,l[d])&&(s[l[d]]=a[l[d]])}}return s}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function g(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(f.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);y[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var S=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,E=60106,R=60107,C=60108,x=60114,A=60109,N=60110,I=60112,T=60113,O=60120,P=60115,M=60116,D=60121,_=60128,L=60129,z=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var U=Symbol.for;k=U("react.element"),E=U("react.portal"),R=U("react.fragment"),C=U("react.strict_mode"),x=U("react.profiler"),A=U("react.provider"),N=U("react.context"),I=U("react.forward_ref"),T=U("react.suspense"),O=U("react.suspense_list"),P=U("react.memo"),M=U("react.lazy"),D=U("react.block"),U("react.scope"),_=U("react.opaque.id"),L=U("react.debug_trace_mode"),z=U("react.offscreen"),F=U("react.legacy_hidden")}var j,W="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=W&&e[W]||e["@@iterator"])?e:null}function V(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var B=!1;function K(e,t){if(!e||B)return"";B=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{B=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function G(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return K(e.type,!1);case 11:return K(e.type.render,!1);case 22:return K(e.type._render,!1);case 1:return K(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case R:return"Fragment";case E:return"Portal";case x:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case A:return(e._context.displayName||"Context")+".Provider";case I:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case P:return $(e.type);case D:return $(e._render);case M:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function ue(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ge=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ve={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ve.hasOwnProperty(e)&&ve[e]?(""+t).trim():t+"px"}function Se(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ve).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ve[t]=ve[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Re(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Ae=null,Ne=null;function Ie(e){if(e=Jr(e)){if("function"!=typeof xe)throw Error(a(280));var t=e.stateNode;t&&(t=to(t),xe(e.stateNode,e.type,t))}}function Te(e){Ae?Ne?Ne.push(e):Ne=[e]:Ae=e}function Oe(){if(Ae){var e=Ae,t=Ne;if(Ne=Ae=null,Ie(e),t)for(e=0;e<t.length;e++)Ie(t[e])}}function Pe(e,t){return e(t)}function Me(e,t,n,r,o){return e(t,n,r,o)}function De(){}var _e=Pe,Le=!1,ze=!1;function Fe(){null===Ae&&null===Ne||(De(),Oe())}function Ue(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var je=!1;if(d)try{var We={};Object.defineProperty(We,"passive",{get:function(){je=!0}}),window.addEventListener("test",We,We),window.removeEventListener("test",We,We)}catch(me){je=!1}function He(e,t,n,r,o,i,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ve=!1,Be=null,Ke=!1,Ge=null,$e={onError:function(e){Ve=!0,Be=e}};function Ye(e,t,n,r,o,i,a,l,s){Ve=!1,Be=null,He.apply($e,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Qe(e)!==e)throw Error(a(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Xe(o),e;if(i===r)return Xe(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,lt=null,st=null,ut=new Map,ct=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=Zr(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==lt&&yt(lt)&&(lt=null),null!==st&&yt(st)&&(st=null),ut.forEach(vt),ct.forEach(vt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function St(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==lt&&wt(lt,e),null!==st&&wt(st,e),ut.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)gt(n),null===n.blockedOn&&dt.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},Rt={},Ct={};function xt(e){if(Rt[e])return Rt[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return Rt[e]=n[t];return e}d&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var At=xt("animationend"),Nt=xt("animationiteration"),It=xt("animationstart"),Tt=xt("transitionend"),Ot=new Map,Pt=new Map,Mt=["abort","abort",At,"animationEnd",Nt,"animationIteration",It,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Dt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(r,t),Ot.set(r,o),u(o,[r])}}(0,i.unstable_now)();var _t=8;function Lt(e){if(0!=(1&e))return _t=15,1;if(0!=(2&e))return _t=14,2;if(0!=(4&e))return _t=13,4;var t=24&e;return 0!==t?(_t=12,t):0!=(32&e)?(_t=11,32):0!=(t=192&e)?(_t=10,t):0!=(256&e)?(_t=9,256):0!=(t=3584&e)?(_t=8,t):0!=(4096&e)?(_t=7,4096):0!=(t=4186112&e)?(_t=6,t):0!=(t=62914560&e)?(_t=5,t):67108864&e?(_t=4,67108864):0!=(134217728&e)?(_t=3,134217728):0!=(t=805306368&e)?(_t=2,t):0!=(1073741824&e)?(_t=1,1073741824):(_t=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return _t=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=_t=15;else if(0!=(i=134217727&n)){var s=i&~a;0!==s?(r=Lt(s),o=_t):0!=(l&=i)&&(r=Lt(l),o=_t)}else 0!=(i=n&~a)?(r=Lt(i),o=_t):0!==l&&(r=Lt(l),o=_t);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Lt(t),o<=_t)return t;_t=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=jt(24&~t))?Ut(10,t):e;case 10:return 0===(e=jt(192&~t))?Ut(8,t):e;case 8:return 0===(e=jt(3584&~t))&&0===(e=jt(4186112&~t))&&(e=512),e;case 2:return 0===(t=jt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function jt(e){return e&-e}function Wt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Bt(e)/Kt|0)|0},Bt=Math.log,Kt=Math.LN2,Gt=i.unstable_UserBlockingPriority,$t=i.unstable_runWithPriority,Yt=!0;function Qt(e,t,n,r){Le||De();var o=Xt,i=Le;Le=!0;try{Me(o,e,t,n,r)}finally{(Le=i)||Fe()}}function qt(e,t,n,r){$t(Gt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Yt)if((o=0==(4&t))&&0<it.length&&-1<ft.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Zt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<ft.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return st=mt(st,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ut.set(i,mt(ut.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Or(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=Ce(r);if(null!==(o=Zr(o))){var i=Qe(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=qe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Or(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var sn,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=ln(dn),pn=o({},dn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(sn=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=sn=0,cn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),gn=ln(mn),yn=ln(o({},mn,{dataTransfer:0})),vn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Sn=ln(o({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Rn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Rn[e])&&!!t[e]}function xn(){return Cn}var An=ln(o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Nn=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),In=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),Tn=ln(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=ln(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Pn=[9,13,27,32],Mn=d&&"CompositionEvent"in window,Dn=null;d&&"documentMode"in document&&(Dn=document.documentMode);var _n=d&&"TextEvent"in window&&!Dn,Ln=d&&(!Mn||Dn&&8<Dn&&11>=Dn),zn=String.fromCharCode(32),Fn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Bn(e,t,n,r){Te(r),0<(t=Mr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,Gn=null;function $n(e){Cr(e,0)}function Yn(e){if(X(eo(e)))return e}function Qn(e,t){if("change"===e)return t}var qn=!1;if(d){var Xn;if(d){var Zn="oninput"in document;if(!Zn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Zn="function"==typeof Jn.oninput}Xn=Zn}else Xn=!1;qn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Kn&&(Kn.detachEvent("onpropertychange",tr),Gn=Kn=null)}function tr(e){if("value"===e.propertyName&&Yn(Gn)){var t=[];if(Bn(t,Gn,e,Ce(e)),e=$n,Le)e(t);else{Le=!0;try{Pe(e,t)}finally{Le=!1,Fe()}}}}function nr(e,t,n){"focusin"===e?(er(),Gn=n,(Kn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Gn)}function or(e,t){if("click"===e)return Yn(t)}function ir(e,t){if("input"===e||"change"===e)return Yn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function sr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=d&&"documentMode"in document&&11>=document.documentMode,mr=null,gr=null,yr=null,vr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==mr||mr!==Z(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Mr(gr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}Dt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Dt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Dt(Mt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<wr.length;Sr++)Pt.set(wr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Rr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,s,u){if(Ye.apply(this,arguments),Ve){if(!Ve)throw Error(a(198));var c=Be;Ve=!1,Be=null,Ke||(Ke=!0,Ge=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&o.isPropagationStopped())break e;Rr(o,l,u),i=s}else for(a=0;a<r.length;a++){if(s=(l=r[a]).instance,u=l.currentTarget,l=l.listener,s!==i&&o.isPropagationStopped())break e;Rr(o,l,u),i=s}}}if(Ke)throw e=Ge,Ke=!1,Ge=null,e}function xr(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var Ar="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Ar]||(e[Ar]=!0,l.forEach((function(t){Er.has(t)||Ir(t,!1,e,null),Ir(t,!0,e,null)})))}function Ir(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=no(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),Tr(i,e,o,t),a.add(l))}function Tr(e,t,n,r){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Qt;break;case 1:o=qt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!je||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Or(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&((s=a.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Zr(l)))return;if(5===(s=a.tag)||6===s){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{_e(e,t,n)}finally{ze=!1,Fe()}}((function(){var r=i,o=Ce(n),a=[];e:{var l=Ot.get(e);if(void 0!==l){var s=fn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=An;break;case"focusin":u="focus",s=vn;break;case"focusout":u="blur",s=vn;break;case"beforeblur":case"afterblur":s=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=In;break;case At:case Nt:case It:s=bn;break;case Tt:s=Tn;break;case"scroll":s=hn;break;case"wheel":s=On;break;case"copy":case"cut":case"paste":s=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Nn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Ue(h,f))&&c.push(Pr(h,m,p))),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Zr(u)&&!u[qr])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?Zr(u):null)&&(u!==(d=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=gn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:eo(s),p=null==u?l:eo(u),(l=new c(m,h+"leave",s,n,o)).target=d,l.relatedTarget=p,m=null,Zr(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=Dr(p))h++;for(p=0,m=f;m;m=Dr(m))p++;for(;0<h-p;)c=Dr(c),h--;for(;0<p-h;)f=Dr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Dr(c),f=Dr(f)}c=null}else c=null;null!==s&&_r(a,l,s,c,!1),null!==u&&null!==d&&_r(a,d,u,c,!0)}if("select"===(s=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Qn;else if(Vn(l))if(qn)g=ir;else{g=rr;var y=nr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Bn(a,g,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&oe(l,"number",l.value)),y=r?eo(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(mr=y,gr=r,yr=null);break;case"focusout":yr=gr=mr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,br(a,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(a,n,o)}var v;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(v=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Wn=!0)),0<(y=Mr(r,b)).length&&(b=new Sn(b,e,null,n,o),a.push({event:b,listeners:y}),(v||null!==(v=jn(n)))&&(b.data=v))),(v=_n?function(e,t){switch(e){case"compositionend":return jn(t);case"keypress":return 32!==t.which?null:(Fn=!0,zn);case"textInput":return(e=t.data)===zn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Mn&&Un(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new Sn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=v)}Cr(a,t)}))}function Pr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ue(e,n))&&r.unshift(Pr(e,i,o)),null!=(i=Ue(e,t))&&r.push(Pr(e,i,o))),e=e.return}return r}function Dr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function _r(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=Ue(n,i))&&a.unshift(Pr(n,s,l)):o||null!=(s=Ue(n,i))&&a.push(Pr(n,s,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Lr(){}var zr=null,Fr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function jr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Br(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Kr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Gr=0,$r=Math.random().toString(36).slice(2),Yr="__reactFiber$"+$r,Qr="__reactProps$"+$r,qr="__reactContainer$"+$r,Xr="__reactEvents$"+$r;function Zr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[qr]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Kr(e);null!==e;){if(n=e[Yr])return n;e=Kr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Yr]||e[qr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function to(e){return e[Qr]||null}function no(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var so={},uo=io(so),co=io(!1),fo=so;function po(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=e.childContextTypes}function mo(){ao(co),ao(uo)}function go(e,t,n){if(uo.current!==so)throw Error(a(168));lo(uo,t),lo(co,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,$(t)||"Unknown",i));return o({},n,r)}function vo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,fo=uo.current,lo(uo,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yo(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(uo),lo(uo,e)):ao(co),lo(co,n)}var wo=null,So=null,ko=i.unstable_runWithPriority,Eo=i.unstable_scheduleCallback,Ro=i.unstable_cancelCallback,Co=i.unstable_shouldYield,xo=i.unstable_requestPaint,Ao=i.unstable_now,No=i.unstable_getCurrentPriorityLevel,Io=i.unstable_ImmediatePriority,To=i.unstable_UserBlockingPriority,Oo=i.unstable_NormalPriority,Po=i.unstable_LowPriority,Mo=i.unstable_IdlePriority,Do={},_o=void 0!==xo?xo:function(){},Lo=null,zo=null,Fo=!1,Uo=Ao(),jo=1e4>Uo?Ao:function(){return Ao()-Uo};function Wo(){switch(No()){case Io:return 99;case To:return 98;case Oo:return 97;case Po:return 96;case Mo:return 95;default:throw Error(a(332))}}function Ho(e){switch(e){case 99:return Io;case 98:return To;case 97:return Oo;case 96:return Po;case 95:return Mo;default:throw Error(a(332))}}function Vo(e,t){return e=Ho(e),ko(e,t)}function Bo(e,t,n){return e=Ho(e),Eo(e,t,n)}function Ko(){if(null!==zo){var e=zo;zo=null,Ro(e)}Go()}function Go(){if(!Fo&&null!==Lo){Fo=!0;var e=0;try{var t=Lo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Lo=null}catch(t){throw null!==Lo&&(Lo=Lo.slice(e+1)),Eo(Io,Ko),t}finally{Fo=!1}}}var $o=S.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Qo=io(null),qo=null,Xo=null,Zo=null;function Jo(){Zo=Xo=qo=null}function ei(e){var t=Qo.current;ao(Qo),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ni(e,t){qo=e,Zo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ma=!0),e.firstContext=null)}function ri(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===qo)throw Error(a(308));Xo=t,qo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var oi=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function li(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ui(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ci(e,t,n,r){var i=e.updateQueue;oi=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?a=c:l.next=c,l=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==a){for(f=i.baseState,l=0,d=c=u=null;;){s=a.lane;var p=a.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(s=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,s);break e}f=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=m.payload)?h.call(p,f,s):h))break e;f=o({},f,s);break e;case 2:oi=!0}}null!==a.callback&&(e.flags|=32,null===(s=i.effects)?i.effects=[a]:s.push(a))}else p={eventTime:p,lane:s,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(c=d=p,u=f):d=d.next=p,l|=s;if(null===(a=a.next)){if(null===(s=i.shared.pending))break;a=s.next,s.next=null,i.lastBaseUpdate=s,i.shared.pending=null}}null===d&&(u=f),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=d,_l|=l,e.lanes=l,e.memoizedState=f}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var fi=(new r.Component).refs;function pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=as(),o=ls(e),i=li(r,o);i.payload=t,null!=n&&(i.callback=n),si(e,i),ss(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=as(),o=ls(e),i=li(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),si(e,i),ss(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=as(),r=ls(e),o=li(n,r);o.tag=2,null!=t&&(o.callback=t),si(e,o),ss(e,r,n)}};function mi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(o,i))}function gi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(o=ho(t)?fo:uo.current,i=(r=null!=(r=t.contextTypes))?po(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function yi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function vi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fi,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ri(i):(i=ho(t)?fo:uo.current,o.context=po(e,i)),ci(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(pi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),ci(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var bi=Array.isArray;function wi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Si(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Fs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Hs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wi(e,t,n),r.return=e,r):((r=Us(n.type,n.key,n.props,null,e.mode,r)).ref=wi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=js(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Hs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Us(t.type,t.key,t.props,null,e.mode,n)).ref=wi(e,null,t),n.return=e,n;case E:return(t=Vs(t,e.mode,n)).return=e,t}if(bi(t)||H(t))return(t=js(t,e.mode,n,null)).return=e,t;Si(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?n.type===R?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(bi(n)||H(n))return null!==o?null:d(e,t,n,r,null);Si(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===R?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(bi(r)||H(r))return d(t,e=e.get(n)||null,r,o,null);Si(t,r)}return null}function m(o,a,l,s){for(var u=null,c=null,d=a,m=a=0,g=null;null!==d&&m<l.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var y=p(o,d,l[m],s);if(null===y){null===d&&(d=g);break}e&&d&&null===y.alternate&&t(o,d),a=i(y,a,m),null===c?u=y:c.sibling=y,c=y,d=g}if(m===l.length)return n(o,d),u;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],s))&&(a=i(d,a,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(o,d);m<l.length;m++)null!==(g=h(d,o,m,l[m],s))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(o,e)})),u}function g(o,l,s,u){var c=H(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var d=c=null,m=l,g=l=0,y=null,v=s.next();null!==m&&!v.done;g++,v=s.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(o,m,v.value,u);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,g),null===d?c=b:d.sibling=b,d=b,m=y}if(v.done)return n(o,m),c;if(null===m){for(;!v.done;g++,v=s.next())null!==(v=f(o,v.value,u))&&(l=i(v,l,g),null===d?c=v:d.sibling=v,d=v);return c}for(m=r(o,m);!v.done;g++,v=s.next())null!==(v=h(m,o,g,v.value,u))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),l=i(v,l,g),null===d?c=v:d.sibling=v,d=v);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===R&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case k:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(i.type===R){n(e,u.sibling),(r=o(u,i.props.children)).return=e,e=r;break e}break;default:if(u.elementType===i.type){n(e,u.sibling),(r=o(u,i.props)).ref=wi(e,u,i),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}i.type===R?((r=js(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Us(i.type,i.key,i.props,null,e.mode,s)).ref=wi(e,r,i),s.return=e,e=s)}return l(e);case E:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Vs(i,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Hs(i,e.mode,s)).return=e,e=r),l(e);if(bi(i))return m(e,r,i,s);if(H(i))return g(e,r,i,s);if(c&&Si(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,$(e.type)||"Component"))}return n(e,r)}}var Ei=ki(!0),Ri=ki(!1),Ci={},xi=io(Ci),Ai=io(Ci),Ni=io(Ci);function Ii(e){if(e===Ci)throw Error(a(174));return e}function Ti(e,t){switch(lo(Ni,t),lo(Ai,e),lo(xi,Ci),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(xi),lo(xi,t)}function Oi(){ao(xi),ao(Ai),ao(Ni)}function Pi(e){Ii(Ni.current);var t=Ii(xi.current),n=pe(t,e.type);t!==n&&(lo(Ai,e),lo(xi,n))}function Mi(e){Ai.current===e&&(ao(xi),ao(Ai))}var Di=io(0);function _i(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Li=null,zi=null,Fi=!1;function Ui(e,t){var n=Ls(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ji(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Wi(e){if(Fi){var t=zi;if(t){var n=t;if(!ji(e,t)){if(!(t=Br(n.nextSibling))||!ji(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(Li=e);Ui(Li,n)}Li=e,zi=Br(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,Li=e}}function Hi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Li=e}function Vi(e){if(e!==Li)return!1;if(!Fi)return Hi(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!jr(t,e.memoizedProps))for(t=zi;t;)Ui(e,t),t=Br(t.nextSibling);if(Hi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zi=Br(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zi=null}}else zi=Li?Br(e.stateNode.nextSibling):null;return!0}function Bi(){zi=Li=null,Fi=!1}var Ki=[];function Gi(){for(var e=0;e<Ki.length;e++)Ki[e]._workInProgressVersionPrimary=null;Ki.length=0}var $i=S.ReactCurrentDispatcher,Yi=S.ReactCurrentBatchConfig,Qi=0,qi=null,Xi=null,Zi=null,Ji=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,o,i){if(Qi=i,qi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$i.current=null===e||null===e.memoizedState?Ia:Ta,e=n(r,o),ea){i=0;do{if(ea=!1,!(25>i))throw Error(a(301));i+=1,Zi=Xi=null,t.updateQueue=null,$i.current=Oa,e=n(r,o)}while(ea)}if($i.current=Na,t=null!==Xi&&null!==Xi.next,Qi=0,Zi=Xi=qi=null,Ji=!1,t)throw Error(a(300));return e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Zi?qi.memoizedState=Zi=e:Zi=Zi.next=e,Zi}function ia(){if(null===Xi){var e=qi.alternate;e=null!==e?e.memoizedState:null}else e=Xi.next;var t=null===Zi?qi.memoizedState:Zi.next;if(null!==t)Zi=t,Xi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Xi=e).memoizedState,baseState:Xi.baseState,baseQueue:Xi.baseQueue,queue:Xi.queue,next:null},null===Zi?qi.memoizedState=Zi=e:Zi=Zi.next=e}return Zi}function aa(e,t){return"function"==typeof t?t(e):t}function la(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Xi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=i=null,u=o;do{var c=u.lane;if((Qi&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=d,i=r):s=s.next=d,qi.lanes|=c,_l|=c}u=u.next}while(null!==u&&u!==o);null===s?i=r:s.next=l,ar(r,t.memoizedState)||(Ma=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function sa(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ar(i,t.memoizedState)||(Ma=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ua(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Qi&e)===e)&&(t._workInProgressVersionPrimary=r,Ki.push(t))),e)return n(t._source);throw Ki.push(t),Error(a(350))}function ca(e,t,n,r){var o=Al;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),s=$i.current,u=s.useState((function(){return ua(o,t,n)})),c=u[1],d=u[0];u=Zi;var f=e.memoizedState,p=f.refs,h=p.getSnapshot,m=f.source;f=f.subscribe;var g=qi;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ar(l,e)){e=n(t._source),ar(d,e)||(c(e),e=ls(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var s=31-Vt(a),u=1<<s;r[s]|=e,a&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=ls(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(m,t)&&ar(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:d}).dispatch=c=Aa.bind(null,qi,e),u.queue=e,u.baseQueue=null,d=ua(o,t,n),u.memoizedState=u.baseState=d),d}function da(e,t,n){return ca(ia(),e,t,n)}function fa(e){var t=oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Aa.bind(null,qi,e),[t.memoizedState,e]}function pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=qi.updateQueue)?(t={lastEffect:null},qi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ha(e){return e={current:e},oa().memoizedState=e}function ma(){return ia().memoizedState}function ga(e,t,n,r){var o=oa();qi.flags|=e,o.memoizedState=pa(1|t,n,void 0,void 0===r?null:r)}function ya(e,t,n,r){var o=ia();r=void 0===r?null:r;var i=void 0;if(null!==Xi){var a=Xi.memoizedState;if(i=a.destroy,null!==r&&na(r,a.deps))return void pa(t,n,i,r)}qi.flags|=e,o.memoizedState=pa(1|t,n,i,r)}function va(e,t){return ga(516,4,e,t)}function ba(e,t){return ya(516,4,e,t)}function wa(e,t){return ya(4,2,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ka(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,Sa.bind(null,t,e),n)}function Ea(){}function Ra(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function xa(e,t){var n=Wo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Yi.transition;Yi.transition=1;try{e(!1),t()}finally{Yi.transition=n}}))}function Aa(e,t,n){var r=as(),o=ls(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===qi||null!==a&&a===qi)ea=Ji=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=a(l,n);if(i.eagerReducer=a,i.eagerState=s,ar(s,l))return}catch(e){}ss(e,o,r)}}var Na={readContext:ri,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Ia={readContext:ri,useCallback:function(e,t){return oa().memoizedState=[e,void 0===t?null:t],e},useContext:ri,useEffect:va,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ga(4,2,e,t)},useMemo:function(e,t){var n=oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Aa.bind(null,qi,e),[r.memoizedState,e]},useRef:ha,useState:fa,useDebugValue:Ea,useDeferredValue:function(e){var t=fa(e),n=t[0],r=t[1];return va((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=fa(!1),t=e[0];return ha(e=xa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:_,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Gr++).toString(36))),Error(a(355))})),n=fa(t)[1];return 0==(2&qi.mode)&&(qi.flags|=516,pa(5,(function(){n("r:"+(Gr++).toString(36))}),void 0,null)),t}return fa(t="r:"+(Gr++).toString(36)),t},unstable_isNewReconciler:!1},Ta={readContext:ri,useCallback:Ra,useContext:ri,useEffect:ba,useImperativeHandle:ka,useLayoutEffect:wa,useMemo:Ca,useReducer:la,useRef:ma,useState:function(){return la(aa)},useDebugValue:Ea,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ba((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[ma().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},Oa={readContext:ri,useCallback:Ra,useContext:ri,useEffect:ba,useImperativeHandle:ka,useLayoutEffect:wa,useMemo:Ca,useReducer:sa,useRef:ma,useState:function(){return sa(aa)},useDebugValue:Ea,useDeferredValue:function(e){var t=sa(aa),n=t[0],r=t[1];return ba((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=sa(aa)[0];return[ma().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return sa(aa)[0]},unstable_isNewReconciler:!1},Pa=S.ReactCurrentOwner,Ma=!1;function Da(e,t,n,r){t.child=null===e?Ri(t,null,n,r):Ei(t,e.child,n,r)}function _a(e,t,n,r,o){n=n.render;var i=t.ref;return ni(t,o),r=ra(e,t,n,r,i,o),null===e||Ma?(t.flags|=1,Da(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function La(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||zs(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Us(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,za(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:sr)(o,r)&&e.ref===t.ref)?Ja(e,t,i):(t.flags|=1,(e=Fs(a,r)).ref=t.ref,e.return=t,t.child=e)}function za(e,t,n,r,o,i){if(null!==e&&sr(e.memoizedProps,r)&&e.ref===t.ref){if(Ma=!1,0==(i&o))return t.lanes=e.lanes,Ja(e,t,i);0!=(16384&e.flags)&&(Ma=!0)}return ja(e,t,n,r,i)}function Fa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},hs(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},hs(0,e),null;t.memoizedState={baseLanes:0},hs(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,hs(0,r);return Da(e,t,o,n),t.child}function Ua(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function ja(e,t,n,r,o){var i=ho(n)?fo:uo.current;return i=po(t,i),ni(t,o),n=ra(e,t,n,r,i,o),null===e||Ma?(t.flags|=1,Da(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function Wa(e,t,n,r,o){if(ho(n)){var i=!0;vo(t)}else i=!1;if(ni(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),gi(t,n,r),vi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;u="object"==typeof u&&null!==u?ri(u):po(t,u=ho(n)?fo:uo.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&yi(t,a,r,u),oi=!1;var f=t.memoizedState;a.state=f,ci(t,r,a,o),s=t.memoizedState,l!==r||f!==s||co.current||oi?("function"==typeof c&&(pi(t,n,c,r),s=t.memoizedState),(l=oi||mi(t,n,l,r,f,s,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ai(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Yo(t.type,l),a.props=u,d=t.pendingProps,f=a.context,s="object"==typeof(s=n.contextType)&&null!==s?ri(s):po(t,s=ho(n)?fo:uo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==d||f!==s)&&yi(t,a,r,s),oi=!1,f=t.memoizedState,a.state=f,ci(t,r,a,o);var h=t.memoizedState;l!==d||f!==h||co.current||oi?("function"==typeof p&&(pi(t,n,p,r),h=t.memoizedState),(u=oi||mi(t,n,u,r,f,h,s))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=s,r=u):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Ha(e,t,n,r,i,o)}function Ha(e,t,n,r,o,i){Ua(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&bo(t,n,!1),Ja(e,t,i);r=t.stateNode,Pa.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ei(t,e.child,null,i),t.child=Ei(t,null,l,i)):Da(e,t,l,i),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Ti(e,t.containerInfo)}var Ba,Ka,Ga,$a={dehydrated:null,retryLane:0};function Ya(e,t,n){var r,o=t.pendingProps,i=Di.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),lo(Di,1&i),null===e?(void 0!==o.fallback&&Wi(t),e=o.children,i=o.fallback,a?(e=Qa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$a,e):"number"==typeof o.unstable_expectedLoadTime?(e=Qa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$a,t.lanes=33554432,e):((n=Ws({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Fs(a,l),null!==e?r=Fs(e,r):(r=js(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=$a,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Fs(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Qa(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Ws(t,o,0,null),n=js(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function qa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ti(e.return,t)}function Xa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Za(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Da(e,t,r.children,n),0!=(2&(r=Di.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&qa(e,n);else if(19===e.tag)qa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(Di,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===_i(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===_i(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xa(t,!0,n,null,i,t.lastEffect);break;case"together":Xa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ja(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),_l|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Fs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&mo(),null;case 3:return Oi(),ao(co),ao(uo),Gi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Mi(t);var i=Ii(Ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ka(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ii(xi.current),Vi(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Yr]=t,r[Qr]=l,n){case"dialog":xr("cancel",r),xr("close",r);break;case"iframe":case"object":case"embed":xr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)xr(kr[e],r);break;case"source":xr("error",r);break;case"img":case"image":case"link":xr("error",r),xr("load",r);break;case"details":xr("toggle",r);break;case"input":ee(r,l),xr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},xr("invalid",r);break;case"textarea":se(r,l),xr("invalid",r)}for(var u in Ee(n,l),e=null,l)l.hasOwnProperty(u)&&(i=l[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):s.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&xr("scroll",r));switch(n){case"input":q(r),re(r,l,!0);break;case"textarea":q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Lr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Yr]=t,e[Qr]=r,Ba(e,t),t.stateNode=e,u=Re(n,r),n){case"dialog":xr("cancel",e),xr("close",e),i=r;break;case"iframe":case"object":case"embed":xr("load",e),i=r;break;case"video":case"audio":for(i=0;i<kr.length;i++)xr(kr[i],e);i=r;break;case"source":xr("error",e),i=r;break;case"img":case"image":case"link":xr("error",e),xr("load",e),i=r;break;case"details":xr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),xr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),xr("invalid",e);break;case"textarea":se(e,r),i=le(e,r),xr("invalid",e);break;default:i=r}Ee(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?Se(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ye(e,d):"number"==typeof d&&ye(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=d&&"onScroll"===l&&xr("scroll",e):null!=d&&w(e,l,d,u))}switch(n){case"input":q(e),re(e,r,!1);break;case"textarea":q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Lr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ga(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ii(Ni.current),Ii(xi.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return ao(Di),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Di.current)?0===Pl&&(Pl=3):(0!==Pl&&3!==Pl||(Pl=4),null===Al||0==(134217727&_l)&&0==(134217727&Ll)||fs(Al,Il))),(r||n)&&(t.flags|=4),null);case 4:return Oi(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return ei(t),null;case 17:return ho(t.type)&&mo(),null;case 19:if(ao(Di),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)el(r,!1);else{if(0!==Pl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=_i(e))){for(t.flags|=64,el(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(Di,1&Di.current|2),t.child}e=e.sibling}null!==r.tail&&jo()>jl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=_i(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*jo()-r.renderingStartTime>jl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=jo(),n.sibling=null,t=Di.current,lo(Di,l?1&t|2:1&t),n):null;case 23:case 24:return ms(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function nl(e){switch(e.tag){case 1:ho(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Oi(),ao(co),ao(uo),Gi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Mi(e),null;case 13:return ao(Di),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Di),null;case 4:return Oi(),null;case 10:return ei(e),null;case 23:case 24:return ms(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=G(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ba=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ka=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ii(xi.current);var a,l=null;switch(n){case"input":i=J(e,i),r=J(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Lr)}for(d in Ee(n,r),n=null,i)if(!r.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var u=i[d];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=i?i[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&xr("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===_?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Ga=function(e,t,n,r){n!==r&&(t.flags|=4)};var il="function"==typeof WeakMap?WeakMap:Map;function al(e,t,n){(n=li(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bl||(Bl=!0,Kl=r),ol(0,t)},n}function ll(e,t,n){(n=li(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Gl?Gl=new Set([this]):Gl.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var sl="function"==typeof WeakSet?WeakSet:Set;function ul(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ps(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function dl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Is(n,e),Ns(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&St(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Is(t,n);else{r=t;try{o()}catch(e){Ps(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ul(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ps(t,e)}break;case 5:ul(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function gl(e){e:{for(var t=e.return;null!==t;){if(ml(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ml(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?yl(e,n,t):vl(e,n,t)}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Lr));else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function vl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(vl(e,t,n),e=e.sibling;null!==e;)vl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,u=s;;)if(pl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Re(e,o),t=Re(e,r),o=0;o<i.length;o+=2){var l=i[o],s=i[o+1];"style"===l?Se(n,s):"dangerouslySetInnerHTML"===l?ge(n,s):"children"===l?ye(n,s):w(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,St(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Ul=jo(),fl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(a(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new sl),t.forEach((function(t){var r=Ds.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function kl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var El=Math.ceil,Rl=S.ReactCurrentDispatcher,Cl=S.ReactCurrentOwner,xl=0,Al=null,Nl=null,Il=0,Tl=0,Ol=io(0),Pl=0,Ml=null,Dl=0,_l=0,Ll=0,zl=0,Fl=null,Ul=0,jl=1/0;function Wl(){jl=jo()+500}var Hl,Vl=null,Bl=!1,Kl=null,Gl=null,$l=!1,Yl=null,Ql=90,ql=[],Xl=[],Zl=null,Jl=0,es=null,ts=-1,ns=0,rs=0,os=null,is=!1;function as(){return 0!=(48&xl)?jo():-1!==ts?ts:ts=jo()}function ls(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===ns&&(ns=Dl),0!==$o.transition){0!==rs&&(rs=null!==Fl?Fl.pendingLanes:0),e=ns;var t=4186112&~rs;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Ut(0!=(4&xl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ns)}function ss(e,t,n){if(50<Jl)throw Jl=0,es=null,Error(a(185));if(null===(e=us(e,t)))return null;Ht(e,t,n),e===Al&&(Ll|=t,4===Pl&&fs(e,Il));var r=Wo();1===t?0!=(8&xl)&&0==(48&xl)?ps(e):(cs(e,n),0===xl&&(Wl(),Ko())):(0==(4&xl)||98!==r&&99!==r||(null===Zl?Zl=new Set([e]):Zl.add(e)),cs(e,n)),Fl=e}function us(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cs(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Vt(l),u=1<<s,c=i[s];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,Lt(u);var d=_t;i[s]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=zt(e,e===Al?Il:0),t=_t,0===r)null!==n&&(n!==Do&&Ro(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Do&&Ro(n)}15===t?(n=ps.bind(null,e),null===Lo?(Lo=[n],zo=Eo(Io,Go)):Lo.push(n),n=Do):n=14===t?Bo(99,ps.bind(null,e)):Bo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),ds.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function ds(e){if(ts=-1,rs=ns=0,0!=(48&xl))throw Error(a(327));var t=e.callbackNode;if(As()&&e.callbackNode!==t)return null;var n=zt(e,e===Al?Il:0);if(0===n)return null;var r=n,o=xl;xl|=16;var i=vs();for(Al===e&&Il===r||(Wl(),gs(e,r));;)try{Ss();break}catch(t){ys(e,t)}if(Jo(),Rl.current=i,xl=o,null!==Nl?r=0:(Al=null,Il=0,r=Pl),0!=(Dl&Ll))gs(e,0);else if(0!==r){if(2===r&&(xl|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=Ft(e))&&(r=bs(e,n))),1===r)throw t=Ml,gs(e,0),fs(e,n),cs(e,jo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Rs(e);break;case 3:if(fs(e,n),(62914560&n)===n&&10<(r=Ul+500-jo())){if(0!==zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){as(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Rs.bind(null,e),r);break}Rs(e);break;case 4:if(fs(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Vt(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=jo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*El(n/1960))-n)){e.timeoutHandle=Wr(Rs.bind(null,e),n);break}Rs(e);break;case 5:Rs(e);break;default:throw Error(a(329))}}return cs(e,jo()),e.callbackNode===t?ds.bind(null,e):null}function fs(e,t){for(t&=~zl,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function ps(e){if(0!=(48&xl))throw Error(a(327));if(As(),e===Al&&0!=(e.expiredLanes&Il)){var t=Il,n=bs(e,t);0!=(Dl&Ll)&&(n=bs(e,t=zt(e,t)))}else n=bs(e,t=zt(e,0));if(0!==e.tag&&2===n&&(xl|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=Ft(e))&&(n=bs(e,t))),1===n)throw n=Ml,gs(e,0),fs(e,t),cs(e,jo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Rs(e),cs(e,jo()),null}function hs(e,t){lo(Ol,Tl),Tl|=t,Dl|=t}function ms(){Tl=Ol.current,ao(Ol)}function gs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Oi(),ao(co),ao(uo),Gi();break;case 5:Mi(r);break;case 4:Oi();break;case 13:case 19:ao(Di);break;case 10:ei(r);break;case 23:case 24:ms()}n=n.return}Al=e,Nl=Fs(e.current,null),Il=Tl=Dl=t,Pl=0,Ml=null,zl=Ll=_l=0}function ys(e,t){for(;;){var n=Nl;try{if(Jo(),$i.current=Na,Ji){for(var r=qi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ji=!1}if(Qi=0,Zi=Xi=qi=null,ea=!1,Cl.current=null,null===n||null===n.return){Pl=1,Ml=t,Nl=null;break}e:{var i=e,a=n.return,l=n,s=t;if(t=Il,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Di.current),f=a;do{var p;if(p=13===f.tag){var h=f.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=f.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!d)}}if(p){var g=f.updateQueue;if(null===g){var y=new Set;y.add(u),f.updateQueue=y}else g.add(u);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var v=li(-1,1);v.tag=2,si(l,v)}l.lanes|=1;break e}s=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new il,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var w=Ms.bind(null,i,u,l);u.then(w,w)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);s=Error(($(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Pl&&(Pl=2),s=rl(s,l),f=a;do{switch(f.tag){case 3:i=s,f.flags|=4096,t&=-t,f.lanes|=t,ui(f,al(0,i,t));break e;case 1:i=s;var S=f.type,k=f.stateNode;if(0==(64&f.flags)&&("function"==typeof S.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Gl||!Gl.has(k)))){f.flags|=4096,t&=-t,f.lanes|=t,ui(f,ll(f,i,t));break e}}f=f.return}while(null!==f)}Es(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function vs(){var e=Rl.current;return Rl.current=Na,null===e?Na:e}function bs(e,t){var n=xl;xl|=16;var r=vs();for(Al===e&&Il===t||gs(e,t);;)try{ws();break}catch(t){ys(e,t)}if(Jo(),xl=n,Rl.current=r,null!==Nl)throw Error(a(261));return Al=null,Il=0,Pl}function ws(){for(;null!==Nl;)ks(Nl)}function Ss(){for(;null!==Nl&&!Co();)ks(Nl)}function ks(e){var t=Hl(e.alternate,e,Tl);e.memoizedProps=e.pendingProps,null===t?Es(e):Nl=t,Cl.current=null}function Es(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Tl)))return void(Nl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Tl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Nl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Pl&&(Pl=5)}function Rs(e){var t=Wo();return Vo(99,Cs.bind(null,e,t)),null}function Cs(e,t){do{As()}while(null!==Yl);if(0!=(48&xl))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<i;){var u=31-Vt(i),c=1<<u;o[u]=0,l[u]=-1,s[u]=-1,i&=~c}if(null!==Zl&&0==(24&r)&&Zl.has(e)&&Zl.delete(e),e===Al&&(Nl=Al=null,Il=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=xl,xl|=32,Cl.current=null,zr=Yt,pr(l=fr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var d=0,f=-1,p=-1,h=0,m=0,g=l,y=null;t:for(;;){for(var v;g!==s||0!==i&&3!==g.nodeType||(f=d+i),g!==u||0!==c&&3!==g.nodeType||(p=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(v=g.firstChild);)y=g,g=v;for(;;){if(g===l)break t;if(y===s&&++h===i&&(f=d),y===u&&++m===c&&(p=d),null!==(v=g.nextSibling))break;y=(g=y).parentNode}g=v}s=-1===f||-1===p?null:{start:f,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Fr={focusedElem:l,selectionRange:s},Yt=!1,os=null,is=!1,Vl=r;do{try{xs()}catch(e){if(null===Vl)throw Error(a(330));Ps(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);os=null,Vl=r;do{try{for(l=e;null!==Vl;){var b=Vl.flags;if(16&b&&ye(Vl.stateNode,""),128&b){var w=Vl.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&b){case 2:gl(Vl),Vl.flags&=-3;break;case 6:gl(Vl),Vl.flags&=-3,wl(Vl.alternate,Vl);break;case 1024:Vl.flags&=-1025;break;case 1028:Vl.flags&=-1025,wl(Vl.alternate,Vl);break;case 4:wl(Vl.alternate,Vl);break;case 8:bl(l,s=Vl);var k=s.alternate;hl(s),null!==k&&hl(k)}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(a(330));Ps(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);if(S=Fr,w=fr(),b=S.focusedElem,l=S.selectionRange,w!==b&&b&&b.ownerDocument&&dr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(S,b.value.length)):(S=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),s=b.textContent.length,k=Math.min(l.start,s),l=void 0===l.end?k:Math.min(l.end,s),!S.extend&&k>l&&(s=l,l=k,k=s),s=cr(b,k),i=cr(b,l),s&&i&&(1!==S.rangeCount||S.anchorNode!==s.node||S.anchorOffset!==s.offset||S.focusNode!==i.node||S.focusOffset!==i.offset)&&((w=w.createRange()).setStart(s.node,s.offset),S.removeAllRanges(),k>l?(S.addRange(w),S.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),S.addRange(w))))),w=[];for(S=b;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(S=w[b]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Yt=!!zr,Fr=zr=null,e.current=n,Vl=r;do{try{for(b=e;null!==Vl;){var E=Vl.flags;if(36&E&&dl(b,Vl.alternate,Vl),128&E){w=void 0;var R=Vl.ref;if(null!==R){var C=Vl.stateNode;switch(Vl.tag){case 5:w=C;break;default:w=C}"function"==typeof R?R(w):R.current=w}}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(a(330));Ps(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);Vl=null,_o(),xl=o}else e.current=n;if($l)$l=!1,Yl=e,Ql=t;else for(Vl=r;null!==Vl;)t=Vl.nextEffect,Vl.nextEffect=null,8&Vl.flags&&((E=Vl).sibling=null,E.stateNode=null),Vl=t;if(0===(r=e.pendingLanes)&&(Gl=null),1===r?e===es?Jl++:(Jl=0,es=e):Jl=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cs(e,jo()),Bl)throw Bl=!1,e=Kl,Kl=null,e;return 0!=(8&xl)||Ko(),null}function xs(){for(;null!==Vl;){var e=Vl.alternate;is||null===os||(0!=(8&Vl.flags)?Je(Vl,os)&&(is=!0):13===Vl.tag&&kl(e,Vl)&&Je(Vl,os)&&(is=!0));var t=Vl.flags;0!=(256&t)&&cl(e,Vl),0==(512&t)||$l||($l=!0,Bo(97,(function(){return As(),null}))),Vl=Vl.nextEffect}}function As(){if(90!==Ql){var e=97<Ql?97:Ql;return Ql=90,Vo(e,Ts)}return!1}function Ns(e,t){ql.push(t,e),$l||($l=!0,Bo(97,(function(){return As(),null})))}function Is(e,t){Xl.push(t,e),$l||($l=!0,Bo(97,(function(){return As(),null})))}function Ts(){if(null===Yl)return!1;var e=Yl;if(Yl=null,0!=(48&xl))throw Error(a(331));var t=xl;xl|=32;var n=Xl;Xl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));Ps(i,e)}}for(n=ql,ql=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===i)throw Error(a(330));Ps(i,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return xl=t,Ko(),!0}function Os(e,t,n){si(e,t=al(0,t=rl(n,t),1)),t=as(),null!==(e=us(e,1))&&(Ht(e,1,t),cs(e,t))}function Ps(e,t){if(3===e.tag)Os(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Os(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gl||!Gl.has(r))){var o=ll(n,e=rl(t,e),1);if(si(n,o),o=as(),null!==(n=us(n,1)))Ht(n,1,o),cs(n,o);else if("function"==typeof r.componentDidCatch&&(null===Gl||!Gl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ms(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=as(),e.pingedLanes|=e.suspendedLanes&n,Al===e&&(Il&n)===n&&(4===Pl||3===Pl&&(62914560&Il)===Il&&500>jo()-Ul?gs(e,0):zl|=n),cs(e,t)}function Ds(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===ns&&(ns=Dl),0===(t=jt(62914560&~ns))&&(t=4194304))),n=as(),null!==(e=us(e,t))&&(Ht(e,t,n),cs(e,n))}function _s(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ls(e,t,n,r){return new _s(e,t,n,r)}function zs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fs(e,t){var n=e.alternate;return null===n?((n=Ls(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Us(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)zs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case R:return js(n.children,o,i,t);case L:l=8,o|=16;break;case C:l=8,o|=1;break;case x:return(e=Ls(12,n,t,8|o)).elementType=x,e.type=x,e.lanes=i,e;case T:return(e=Ls(13,n,t,o)).type=T,e.elementType=T,e.lanes=i,e;case O:return(e=Ls(19,n,t,o)).elementType=O,e.lanes=i,e;case z:return Ws(n,o,i,t);case F:return(e=Ls(24,n,t,o)).elementType=F,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case A:l=10;break e;case N:l=9;break e;case I:l=11;break e;case P:l=14;break e;case M:l=16,r=null;break e;case D:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ls(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function js(e,t,n,r){return(e=Ls(7,e,r,t)).lanes=n,e}function Ws(e,t,n,r){return(e=Ls(23,e,r,t)).elementType=z,e.lanes=n,e}function Hs(e,t,n){return(e=Ls(6,e,null,t)).lanes=n,e}function Vs(e,t,n){return(t=Ls(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Wt(0),this.expirationTimes=Wt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Wt(0),this.mutableSourceEagerHydrationData=null}function Ks(e,t,n,r){var o=t.current,i=as(),l=ls(o);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(ho(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var u=n.type;if(ho(u)){n=yo(n,u,s);break e}}n=s}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=li(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),ss(o,l,i),l}function Gs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ys(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}function Qs(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Bs(e,t,null!=n&&!0===n.hydrate),t=Ls(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ii(t),e[qr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function qs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xs(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Gs(a);l.call(e)}}Ks(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Qs(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Gs(a);s.call(e)}}!function(e,t){var n=xl;xl&=-2,xl|=8;try{e(t)}finally{0===(xl=n)&&(Wl(),Ko())}}((function(){Ks(t,a,e,o)}))}return Gs(a)}Hl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Ma=!0;else{if(0==(n&r)){switch(Ma=!1,t.tag){case 3:Va(t),Bi();break;case 5:Pi(t);break;case 1:ho(t.type)&&vo(t);break;case 4:Ti(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(Qo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ya(e,t,n):(lo(Di,1&Di.current),null!==(t=Ja(e,t,n))?t.sibling:null);lo(Di,1&Di.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Za(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(Di,Di.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return Ja(e,t,n)}Ma=0!=(16384&e.flags)}else Ma=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,uo.current),ni(t,n),o=ra(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;vo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ii(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pi(t,r,l,e),o.updater=hi,t.stateNode=o,o._reactInternals=t,vi(t,r,e,n),t=Ha(null,t,r,!0,i,n)}else t.tag=0,Da(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return zs(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===P)return 14}return 2}(o),e=Yo(o,e),i){case 0:t=ja(null,t,o,e,n);break e;case 1:t=Wa(null,t,o,e,n);break e;case 11:t=_a(null,t,o,e,n);break e;case 14:t=La(null,t,o,Yo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ai(e,t),ci(t,r,null,n),(r=t.memoizedState.element)===o)Bi(),t=Ja(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(zi=Br(t.stateNode.containerInfo.firstChild),Li=t,i=Fi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Ki.push(i);for(n=Ri(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Da(e,t,r,n),Bi();t=t.child}return t;case 5:return Pi(t),null===e&&Wi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,jr(r,o)?l=null:null!==i&&jr(r,i)&&(t.flags|=16),Ua(e,t),Da(e,t,l,n),t.child;case 6:return null===e&&Wi(t),null;case 13:return Ya(e,t,n);case 4:return Ti(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ei(t,null,r,n):Da(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,_a(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Da(e,t,t.pendingProps,n),t.child;case 8:case 12:return Da(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var s=t.type._context;if(lo(Qo,s._currentValue),s._currentValue=i,null!==l)if(s=l.value,0==(i=ar(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===o.children&&!co.current){t=Ja(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=li(-1,n&-n)).tag=2,si(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),ti(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Da(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(o=ri(o,i.unstable_observedBits)),t.flags|=1,Da(e,t,r,n),t.child;case 14:return i=Yo(o=t.type,t.pendingProps),La(e,t,o,i=Yo(o.type,i),r,n);case 15:return za(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,vo(t)):e=!1,ni(t,n),gi(t,r,o),vi(t,r,o,n),Ha(null,t,r,!0,e,n);case 19:return Za(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},Qs.prototype.render=function(e){Ks(e,this._internalRoot,null,null)},Qs.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ks(null,e,null,(function(){t[qr]=null}))},et=function(e){13===e.tag&&(ss(e,4,as()),Ys(e,4))},tt=function(e){13===e.tag&&(ss(e,67108864,as()),Ys(e,67108864))},nt=function(e){if(13===e.tag){var t=as(),n=ls(e);ss(e,n,t),Ys(e,n)}},rt=function(e,t){return t()},xe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(a(90));X(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Pe=function(e,t){var n=xl;xl|=1;try{return e(t)}finally{0===(xl=n)&&(Wl(),Ko())}},Me=function(e,t,n,r,o){var i=xl;xl|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(xl=i)&&(Wl(),Ko())}},De=function(){0==(49&xl)&&(function(){if(null!==Zl){var e=Zl;Zl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cs(e,jo())}))}Ko()}(),As())},_e=function(e,t){var n=xl;xl|=2;try{return e(t)}finally{0===(xl=n)&&(Wl(),Ko())}};var Zs={findFiberByHostInstance:Zr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},Js={bundleType:Zs.bundleType,version:Zs.version,rendererPackageName:Zs.rendererPackageName,rendererConfig:Zs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:S.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:Zs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var eu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!eu.isDisabled&&eu.supportsFiber)try{wo=eu.inject(Js),So=eu}catch(me){}}t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.render=function(e,t,n){if(!qs(t))throw Error(a(200));return Xs(null,e,t,!1,n)}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case m:case s:return e;default:return t}}case o:return t}}}function k(e){return S(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=i,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===u},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===f},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===a},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),l=d("react.context"),s=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=v.prototype=new y;b.constructor=v,r(b,g.prototype),b.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:w.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case i:s=!0}}if(s)return a=a(s=e),e=""===r?"."+x(s,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),A(a,t,n,"",(function(e){return e}))):null!=a&&(R(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+x(l=e[u],u);s+=A(l,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(l=e.next()).done;)s+=A(l=l.value,t,n,c=r+x(l,u++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function N(e,t,n){if(null==e)return e;var r=[],o=0;return A(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function I(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function O(){var e=T.current;if(null===e)throw Error(p(321));return e}var P={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!R(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=v,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)S.call(t,c)&&!k.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=R,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,y=-1,v=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):v=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,S=w.port2;w.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+v;try{g(!0,e)?S.postMessage(null):(m=!1,g=null)}catch(e){throw S.postMessage(null),e}}else m=!1},n=function(e){g=e,m||(m=!0,S.postMessage(null))},r=function(e,n){y=f((function(){e(t.unstable_now())}),n)},o=function(){p(y),y=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function R(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,s=e[l];if(void 0!==a&&0>C(a,n))void 0!==s&&0>C(s,a)?(e[r]=s,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>C(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],A=[],N=1,I=null,T=3,O=!1,P=!1,M=!1;function D(e){for(var t=E(A);null!==t;){if(null===t.callback)R(A);else{if(!(t.startTime<=e))break;R(A),t.sortIndex=t.expirationTime,k(x,t)}t=E(A)}}function _(e){if(M=!1,D(e),!P)if(null!==E(x))P=!0,n(L);else{var t=E(A);null!==t&&r(_,t.startTime-e)}}function L(e,n){P=!1,M&&(M=!1,o()),O=!0;var i=T;try{for(D(n),I=E(x);null!==I&&(!(I.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=I.callback;if("function"==typeof a){I.callback=null,T=I.priorityLevel;var l=a(I.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?I.callback=l:I===E(x)&&R(x),D(n)}else R(x);I=E(x)}if(null!==I)var s=!0;else{var u=E(A);null!==u&&r(_,u.startTime-n),s=!1}return s}finally{I=null,T=i,O=!1}}var z=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){P||O||(P=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return E(x)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:N++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>l?(e.sortIndex=a,k(A,e),null===E(x)&&e===E(A)&&(M?o():M=!0,r(_,a-l))):(e.sortIndex=s,k(x,e),P||O||(P=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(294),t=n(935);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function i(e,t){if(null==e)return{};var n,r,i=o(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const l="object"===("undefined"==typeof window?"undefined":a(window))&&"object"===("undefined"==typeof document?"undefined":a(document))&&9===document.nodeType;function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function c(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f={}.constructor;function p(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(p);if(e.constructor!==f)return e;var t={};for(var n in e)t[n]=p(e[n]);return t}function h(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=p(t);return r.plugins.onCreateRule(e,o,n)||(e[0],null)}var m=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function g(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=m(e[r]," ");else n=m(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function y(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function v(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var s=a[l];for(var u in s){var c=s[u];null!=c&&(r&&(r+="\n"),r+=""+y(u+": "+g(c)+";",i))}}else for(var d in a){var f=a[d];null!=f&&(r&&(r+="\n"),r+=""+y(d+": "+g(f)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+y(p+": "+g(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),y(e+" {"+r,--i)+y("}",i)):r}var b=/([[\].#*$><+~=|^:(),"'`\s])/g,w="undefined"!=typeof CSS&&CSS.escape,S=function(e){return w?w(e):e.replace(b,"\\$1")},k=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var s=this.options.sheet;return s&&s.attached,this},e}(),E=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,l=r.sheet,s=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=s(d(d(o)),l),o.selectorText="."+S(o.id)),o}c(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=g(n))}return e},n.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?r({},e,{allowEmpty:!0}):e;return v(this.selectorText,this.style,n)},u(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;n&&t&&(t.setSelector(n,e)||t.replaceRule(n,this))}},get:function(){return this.selectorText}}]),t}(k),R={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new E(e,t,n)}},C={indent:1,children:!0},x=/@([\w-]+)/,A=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.query=n.name;var o=e.match(x);for(var i in this.at=o?o[1]:"unknown",this.options=n,this.rules=new q(r({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=C),null==e.indent&&(e.indent=C.indent),null==e.children&&(e.children=C.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),N=/@media|@supports\s+/,I={onCreateRule:function(e,t,n){return N.test(e)?new A(e,t,n):null}},T={indent:1,children:!0},O=/@keyframes\s+([\w-]+)/,P=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var o=e.match(O);o&&o[1]?this.name=o[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,l=n.generateId;for(var s in this.id=!1===i?this.name:S(l(this,a)),this.rules=new q(r({},n,{parent:this})),t)this.rules.add(s,t[s],r({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=T),null==e.indent&&(e.indent=T.indent),null==e.children&&(e.children=T.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),M=/@keyframes\s+/,D=/\$([\w-]+)/g,_=function(e,t){return"string"==typeof e?e.replace(D,(function(e,n){return n in t?t[n]:e})):e},L=function(e,t,n){var r=e[t],o=_(r,n);o!==r&&(e[t]=o)},z={onCreateRule:function(e,t,n){return"string"==typeof e&&M.test(e)?new P(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&L(e,"animation-name",n.keyframes),"animation"in e&&L(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return _(e,r.keyframes);default:return e}}},F=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return c(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?r({},e,{allowEmpty:!0}):e;return v(this.key,this.style,n)},t}(k),U={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new F(e,t,n):null}},j=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=v(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return v(this.at,this.style,e)},e}(),W=/@font-face/,H={onCreateRule:function(e,t,n){return W.test(e)?new j(e,t,n):null}},V=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return v(this.key,this.style,e)},e}(),B={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new V(e,t,n):null}},K=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),G={"@charset":!0,"@import":!0,"@namespace":!0},$=[R,I,z,U,H,B,{onCreateRule:function(e,t,n){return e in G?new K(e,t,n):null}}],Y={process:!0},Q={force:!0,process:!0},q=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var o=this.options,i=o.parent,a=o.sheet,l=o.jss,s=o.Renderer,u=o.generateId,c=o.scoped,d=r({classes:this.classes,parent:i,sheet:a,jss:l,Renderer:s,generateId:u,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),f=e;e in this.raw&&(f=e+"-d"+this.counter++),this.raw[f]=t,f in this.classes&&(d.selector="."+S(this.classes[f]));var p=h(f,t,d);if(!p)return null;this.register(p);var m=void 0===d.index?this.index.length:d.index;return this.index.splice(m,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof E?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof P&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof E?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof P&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=Y);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,s=l.style;if(i.onUpdate(n,t,a,r),r.process&&s&&s!==l.style){for(var u in i.onProcessStyle(l.style,l,a),l.style){var c=l.style[u];c!==s[u]&&l.prop(u,c,Q)}for(var d in s){var f=l.style[d],p=s[d];null==f&&f!==p&&l.prop(d,null,Q)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),X=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=r({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new q(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Z=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),J=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=o(t,["attached"]),i="",a=0;a<this.registry.length;a++){var l=this.registry[a];null!=n&&l.attached!==n||(i&&(i+="\n"),i+=l.toString(r))}return i},u(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),ee="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),te="2f1acc6c3a606b082e5eef5e54414ffb";null==ee[te]&&(ee[te]=0);var ne=ee[te]++,re=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+ne+o+t:i+n.key+"-"+ne+(o?"-"+o:"")+"-"+t}},oe=function(e){var t;return function(){return t||(t=e()),t}};function ie(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function ae(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=g(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function le(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function se(e,t){return e.selectorText=t,e.selectorText===t}var ue=oe((function(){return document.querySelector("head")}));var ce=oe((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),de=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[n]},fe=function(){function e(e){this.getPropertyValue=ie,this.setProperty=ae,this.removeProperty=le,this.setSelector=se,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&J.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=ce();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=function(e){var t=J.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=ue(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else ue().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(o=de(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,o),o)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var i=e.toString();if(!i)return!1;var a=de(n,i,t);return!1!==a&&(this.hasInsertedRules=!0,e.renderable=a,a)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),pe=0,he=function(){function e(e){this.id=pe++,this.version="10.4.0",this.plugins=new Z,this.options={id:{minify:!1},createGenerateId:re,Renderer:l?fe:null,plugins:[]},this.generateId=re({minify:!1});for(var t=0;t<$.length;t++)this.plugins.use($[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=r({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===J.index?0:J.index+1);var o=new X(e,r({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(o),o},t.removeStyleSheet=function(e){return e.detach(),J.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var o=r({},n,{name:e,jss:this,Renderer:this.options.Renderer});o.generateId||(o.generateId=this.generateId),o.classes||(o.classes={}),o.keyframes||(o.keyframes={});var i=h(e,t,o);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function me(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var i=me(r);i&&(t||(t={}),t[n]=i)}}return t}var ge="undefined"!=typeof CSS&&CSS&&"number"in CSS,ye=function(e){return new he(e)};function ve(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var o=r({},t);return Object.keys(n).forEach((function(e){n[e]&&(o[e]="".concat(t[e]," ").concat(n[e]))})),o}ye();const be=function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},we=function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},Se=function(e,t,n){e.get(t).delete(n)},ke=e.createContext(null);function Ee(){return e.useContext(ke)}n(697);const Re="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var Ce=["checked","disabled","error","focused","focusVisible","required","expanded","selected"],xe=Date.now(),Ae="fnValues"+xe,Ne="fnStyle"+ ++xe;var Ie="@global",Te="@global ",Oe=function(){function e(e,t,n){for(var o in this.type="global",this.at=Ie,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new q(r({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Pe=function(){function e(e,t,n){this.type="global",this.at=Ie,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var o=e.substr(Te.length);this.rule=n.jss.createRule(o,t,r({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Me=/\s*,\s*/g;function De(e,t){for(var n=e.split(Me),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var _e=/\s*,\s*/g,Le=/&/g,ze=/\$([\w-]+)/g;var Fe=/[A-Z]/g,Ue=/^ms-/,je={};function We(e){return"-"+e.toLowerCase()}const He=function(e){if(je.hasOwnProperty(e))return je[e];var t=e.replace(Fe,We);return je[e]=Ue.test(t)?"-"+t:t};function Ve(e){var t={};for(var n in e)t[0===n.indexOf("--")?n:He(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ve):t.fallbacks=Ve(e.fallbacks)),t}var Be=ge&&CSS?CSS.px:"px",Ke=ge&&CSS?CSS.ms:"ms",Ge=ge&&CSS?CSS.percent:"%";function $e(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Ye=$e({"animation-delay":Ke,"animation-duration":Ke,"background-position":Be,"background-position-x":Be,"background-position-y":Be,"background-size":Be,border:Be,"border-bottom":Be,"border-bottom-left-radius":Be,"border-bottom-right-radius":Be,"border-bottom-width":Be,"border-left":Be,"border-left-width":Be,"border-radius":Be,"border-right":Be,"border-right-width":Be,"border-top":Be,"border-top-left-radius":Be,"border-top-right-radius":Be,"border-top-width":Be,"border-width":Be,margin:Be,"margin-bottom":Be,"margin-left":Be,"margin-right":Be,"margin-top":Be,padding:Be,"padding-bottom":Be,"padding-left":Be,"padding-right":Be,"padding-top":Be,"mask-position-x":Be,"mask-position-y":Be,"mask-size":Be,height:Be,width:Be,"min-height":Be,"max-height":Be,"min-width":Be,"max-width":Be,bottom:Be,left:Be,top:Be,right:Be,"box-shadow":Be,"text-shadow":Be,"column-gap":Be,"column-rule":Be,"column-rule-width":Be,"column-width":Be,"font-size":Be,"font-size-delta":Be,"letter-spacing":Be,"text-indent":Be,"text-stroke":Be,"text-stroke-width":Be,"word-spacing":Be,motion:Be,"motion-offset":Be,outline:Be,"outline-offset":Be,"outline-width":Be,perspective:Be,"perspective-origin-x":Ge,"perspective-origin-y":Ge,"transform-origin":Ge,"transform-origin-x":Ge,"transform-origin-y":Ge,"transform-origin-z":Ge,"transition-delay":Ke,"transition-duration":Ke,"vertical-align":Be,"flex-basis":Be,"shape-margin":Be,size:Be,grid:Be,"grid-gap":Be,"grid-row-gap":Be,"grid-column-gap":Be,"grid-template-rows":Be,"grid-template-columns":Be,"grid-auto-rows":Be,"grid-auto-columns":Be,"box-shadow-x":Be,"box-shadow-y":Be,"box-shadow-blur":Be,"box-shadow-spread":Be,"font-line-height":Be,"text-shadow-x":Be,"text-shadow-y":Be,"text-shadow-blur":Be});function Qe(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Qe(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=Qe(o,t[o],n);else for(var i in t)t[i]=Qe(e+"-"+i,t[i],n);else if("number"==typeof t){var a=n[e]||Ye[e];return a?"function"==typeof a?a(t).toString():""+t+a:t.toString()}return t}function qe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Xe(e,t){if(e){if("string"==typeof e)return qe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qe(e,t):void 0}}function Ze(e){return function(e){if(Array.isArray(e))return qe(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Xe(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Je="",et="",tt="",nt="",rt=l&&"ontouchstart"in document.documentElement;if(l){var ot={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},it=document.createElement("p").style;for(var at in ot)if(at+"Transform"in it){Je=at,et=ot[at];break}"Webkit"===Je&&"msHyphens"in it&&(Je="ms",et=ot.ms,nt="edge"),"Webkit"===Je&&"-apple-trailing-word"in it&&(tt="apple")}var lt=Je,st=et,ut=tt,ct=nt,dt=rt,ft={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===lt?"-webkit-"+e:st+e)}},pt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===lt?st+"print-"+e:e)}},ht=/[-\s]+(.)?/g;function mt(e,t){return t?t.toUpperCase():""}function gt(e){return e.replace(ht,mt)}function yt(e){return gt("-"+e)}var vt,bt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===lt){var n="mask-image";if(gt(n)in t)return e;if(lt+yt(n)in t)return st+e}return e}},wt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==ut||dt?e:st+e)}},St={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:st+e)}},kt={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:st+e)}},Et={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===lt||"ms"===lt&&"edge"!==ct?st+e:e)}},Rt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===lt||"ms"===lt||"apple"===ut?st+e:e)}},Ct={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===lt?"WebkitColumn"+yt(e)in t&&st+"column-"+e:"Moz"===lt&&"page"+yt(e)in t&&"page-"+e)}},xt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===lt)return e;var n=e.replace("-inline","");return lt+yt(n)in t&&st+n}},At={supportedProperty:function(e,t){return gt(e)in t&&e}},Nt={supportedProperty:function(e,t){var n=yt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:lt+n in t?st+e:"Webkit"!==lt&&"Webkit"+n in t&&"-webkit-"+e}},It={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===lt?""+st+e:e)}},Tt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===lt?st+"scroll-chaining":e)}},Ot={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Pt={supportedProperty:function(e,t){var n=Ot[e];return!!n&&lt+yt(n)in t&&st+n}},Mt={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Dt=Object.keys(Mt),_t=function(e){return st+e},Lt=[ft,pt,bt,wt,St,kt,Et,Rt,Ct,xt,At,Nt,It,Tt,Pt,{supportedProperty:function(e,t,n){var r=n.multiple;if(Dt.indexOf(e)>-1){var o=Mt[e];if(!Array.isArray(o))return lt+yt(o)in t&&st+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(lt+yt(o[0])in t))return!1;return o.map(_t)}return!1}}],zt=Lt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Ft=Lt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Ze(t.noPrefill)),e}),[]),Ut={};if(l){vt=document.createElement("p");var jt=window.getComputedStyle(document.documentElement,"");for(var Wt in jt)isNaN(Wt)||(Ut[jt[Wt]]=jt[Wt]);Ft.forEach((function(e){return delete Ut[e]}))}function Ht(e,t){if(void 0===t&&(t={}),!vt)return e;if(null!=Ut[e])return Ut[e];"transition"!==e&&"transform"!==e||(t[e]=e in vt.style);for(var n=0;n<zt.length&&(Ut[e]=zt[n](e,vt.style,t),!Ut[e]);n++);try{vt.style[e]=""}catch(e){return!1}return Ut[e]}var Vt,Bt={},Kt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Gt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function $t(e,t,n){return"var"===t?"var":"all"===t?"all":"all"===n?", all":(t?Ht(t):", "+Ht(n))||t||n}function Yt(e,t){var n=t;if(!Vt||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Bt[r])return Bt[r];try{Vt.style[e]=n}catch(e){return Bt[r]=!1,!1}if(Kt[e])n=n.replace(Gt,$t);else if(""===Vt.style[e]&&("-ms-flex"===(n=st+n)&&(Vt.style[e]="-ms-flexbox"),Vt.style[e]=n,""===Vt.style[e]))return Bt[r]=!1,!1;return Vt.style[e]="",Bt[r]=n,Bt[r]}l&&(Vt=document.createElement("p"));var Qt,qt=ye({plugins:[{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=h(e,{},n);return r[Ne]=t,r},onProcessStyle:function(e,t){if(Ae in t||Ne in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Ae]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[Ne];i&&(o.style=i(e)||{});var a=o[Ae];if(a)for(var l in a)o.prop(l,a[l](e),r)}},{onCreateRule:function(e,t,n){if(!e)return null;if(e===Ie)return new Oe(e,t,n);if("@"===e[0]&&e.substr(0,Te.length)===Te)return new Pe(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,o=n?n[Ie]:null;if(o){for(var i in o)t.sheet.addRule(i,o[i],r({},t,{selector:De(i,e.selector)}));delete n[Ie]}}(e),function(e){var t=e.options,n=e.style;for(var o in n)if("@"===o[0]&&o.substr(0,Ie.length)===Ie){var i=De(o.substr(Ie.length),e.selector);t.sheet.addRule(i,n[o],r({},t,{selector:i})),delete n[o]}}(e))}},function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(_e),r=e.split(_e),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var s=r[l];o&&(o+=", "),o+=-1!==s.indexOf("&")?s.replace(Le,a):a+" "+s}return o}function n(e,t,n){if(n)return r({},n,{index:n.index+1});var o=e.options.nestingLevel;o=void 0===o?1:o+1;var i=r({},e.options,{nestingLevel:o,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(o,i,a){if("style"!==i.type)return o;var l,s,u=i,c=u.options.parent;for(var d in o){var f=-1!==d.indexOf("&"),p="@"===d[0];if(f||p){if(l=n(u,c,l),f){var h=t(d,u.selector);s||(s=e(c,a)),h=h.replace(ze,s),c.addRule(h,o[d],r({},l,{selector:h}))}else p&&c.addRule(d,{},l).addRule(u.key,o[d],{selector:u.selector});delete o[d]}}return o}}}(),{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ve(e[t]);return e}return Ve(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=He(t);return t===r?e:(n.prop(r,e),null)}},function(e){void 0===e&&(e={});var t=$e(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Qe(r,e[r],t);return e},onChangeValue:function(e,n){return Qe(n,e,t)}}}(),"undefined"==typeof window?null:function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=Ht(n);i&&i!==n&&(o=!0);var a=!1,l=Yt(i,g(r));l&&l!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===lt?e:"@"+st+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Yt(t,g(e))||e}}}(),(Qt=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length},{onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n={},r=Object.keys(e).sort(Qt),o=0;o<r.length;o++)n[r[o]]=e[r[o]];return n}})]}),Xt={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,l=""===a?"":"".concat(a,"-"),s=0,u=function(){return s+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Ce.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Re]&&""===a?"".concat(i,"-").concat(u()):i}return"".concat(l).concat(o).concat(u())}}(),jss:qt,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Zt=e.createContext(Xt),Jt=-1e9;function en(){return Jt+=1}function tn(e){return(tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function nn(e){return e&&"object"===tn(e)&&e.constructor===Object}function rn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?r({},e):e;return nn(e)&&nn(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(nn(t[r])&&r in e?o[r]=rn(e[r],t[r],n):o[r]=t[r])})),o}function on(e){var t="function"==typeof e;return{create:function(n,o){var i;try{i=t?e(n):e}catch(e){throw e}if(!o||!n.overrides||!n.overrides[o])return i;var a=n.overrides[o],l=r({},i);return Object.keys(a).forEach((function(e){l[e]=rn(l[e],a[e])})),l},options:{}}}const an={};function ln(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=ve({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function sn(e,t){var n=e.state,o=e.theme,i=e.stylesOptions,a=e.stylesCreator,l=e.name;if(!i.disableGeneration){var s=we(i.sheetsManager,a,o);s||(s={refs:0,staticSheet:null,dynamicStyles:null},be(i.sheetsManager,a,o,s));var u=r(r(r({},a.options),i),{},{theme:o,flip:"boolean"==typeof i.flip?i.flip:"rtl"===o.direction});u.generateId=u.serverGenerateClassName||u.generateClassName;var c=i.sheetsRegistry;if(0===s.refs){var d;i.sheetsCache&&(d=we(i.sheetsCache,a,o));var f=a.create(o,l);d||((d=i.jss.createStyleSheet(f,r({link:!1},u))).attach(),i.sheetsCache&&be(i.sheetsCache,a,o,d)),c&&c.add(d),s.staticSheet=d,s.dynamicStyles=me(f)}if(s.dynamicStyles){var p=i.jss.createStyleSheet(s.dynamicStyles,r({link:!0},u));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=ve({baseClasses:s.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=s.staticSheet.classes;s.refs+=1}}function un(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function cn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=we(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(Se(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function dn(t,n){var r,o=e.useRef([]),i=e.useMemo((function(){return{}}),n);o.current!==i&&(o.current=i,r=t()),e.useEffect((function(){return function(){r&&r()}}),[i])}function fn(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.name,a=n.classNamePrefix,l=n.Component,s=n.defaultTheme,u=void 0===s?an:s,c=i(n,["name","classNamePrefix","Component","defaultTheme"]),d=on(t),f=o||a||"makeStyles";d.options={index:en(),name:o,meta:f,classNamePrefix:f};var p=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Ee()||u,i=r(r({},e.useContext(Zt)),c),a=e.useRef(),s=e.useRef();dn((function(){var e={name:o,state:{},stylesCreator:d,stylesOptions:i,theme:n};return sn(e,t),s.current=!1,a.current=e,function(){cn(e)}}),[n,d]),e.useEffect((function(){s.current&&un(a.current,t),s.current=!0}));var f=ln(a.current,t.classes,l);return f};return p}var pn=["xs","sm","md","lg","xl"];function hn(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,o=e.unit,a=void 0===o?"px":o,l=e.step,s=void 0===l?5:l,u=i(e,["values","unit","step"]);function c(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(a,")")}function d(e,t){var r=pn.indexOf(t);return r===pn.length-1?c(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(a,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[pn[r+1]]?n[pn[r+1]]:t)-s/100).concat(a,")")}return r({keys:pn,values:n,up:c,down:function(e){var t=pn.indexOf(e)+1,r=n[pn[t]];return t===pn.length?c("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(a,")")},between:d,only:function(e){return d(e,e)},width:function(e){return n[e]}},u)}function mn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function gn(e,t,n){var o;return r({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return r({paddingLeft:t(2),paddingRight:t(2)},n,mn({},e.up("sm"),r({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(o={minHeight:56},mn(o,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),mn(o,e.up("sm"),{minHeight:64}),o)},n)}function yn(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}const vn={black:"#000",white:"#fff"},bn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},wn="#7986cb",Sn="#3f51b5",kn="#303f9f",En="#ff4081",Rn="#f50057",Cn="#c51162",xn="#e57373",An="#f44336",Nn="#d32f2f",In="#ffb74d",Tn="#ff9800",On="#f57c00",Pn="#64b5f6",Mn="#2196f3",Dn="#1976d2",_n="#81c784",Ln="#4caf50",zn="#388e3c";function Fn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function Un(e){if(e.type)return e;if("#"===e.charAt(0))return Un(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(yn(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function jn(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function Wn(e){var t="hsl"===(e=Un(e)).type?Un(function(e){var t=(e=Un(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",s=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),jn({type:l,values:s})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Hn(e,t){return e=Un(e),t=Fn(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,jn(e)}var Vn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:vn.white,default:bn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Bn={text:{primary:vn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:bn[800],default:"#303030"},action:{active:vn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Kn(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=Un(e),t=Fn(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return jn(e)}(e.main,o):"dark"===t&&(e.dark=function(e,t){if(e=Un(e),t=Fn(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return jn(e)}(e.main,i)))}function Gn(e){var t=e.primary,n=void 0===t?{light:wn,main:Sn,dark:kn}:t,o=e.secondary,a=void 0===o?{light:En,main:Rn,dark:Cn}:o,l=e.error,s=void 0===l?{light:xn,main:An,dark:Nn}:l,u=e.warning,c=void 0===u?{light:In,main:Tn,dark:On}:u,d=e.info,f=void 0===d?{light:Pn,main:Mn,dark:Dn}:d,p=e.success,h=void 0===p?{light:_n,main:Ln,dark:zn}:p,m=e.type,g=void 0===m?"light":m,y=e.contrastThreshold,v=void 0===y?3:y,b=e.tonalOffset,w=void 0===b?.2:b,S=i(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function k(e){return function(e,t){var n=Wn(e),r=Wn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Bn.text.primary)>=v?Bn.text.primary:Vn.text.primary}var E=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=r({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(yn(4,t));if("string"!=typeof e.main)throw new Error(yn(5,JSON.stringify(e.main)));return Kn(e,"light",n,w),Kn(e,"dark",o,w),e.contrastText||(e.contrastText=k(e.main)),e},R={dark:Bn,light:Vn};return rn(r({common:vn,type:g,primary:E(n),secondary:E(a,"A400","A200","A700"),error:E(s),warning:E(c),info:E(f),success:E(h),grey:bn,contrastThreshold:v,getContrastText:k,augmentColor:E,tonalOffset:w},R[g]),S)}function $n(e){return Math.round(1e5*e)/1e5}var Yn={textTransform:"uppercase"},Qn='"Roboto", "Helvetica", "Arial", sans-serif';function qn(e,t){var n="function"==typeof t?t(e):t,o=n.fontFamily,a=void 0===o?Qn:o,l=n.fontSize,s=void 0===l?14:l,u=n.fontWeightLight,c=void 0===u?300:u,d=n.fontWeightRegular,f=void 0===d?400:d,p=n.fontWeightMedium,h=void 0===p?500:p,m=n.fontWeightBold,g=void 0===m?700:m,y=n.htmlFontSize,v=void 0===y?16:y,b=n.allVariants,w=n.pxToRem,S=i(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),k=s/14,E=w||function(e){return"".concat(e/v*k,"rem")},R=function(e,t,n,o,i){return r({fontFamily:a,fontWeight:e,fontSize:E(t),lineHeight:n},a===Qn?{letterSpacing:"".concat($n(o/t),"em")}:{},i,b)},C={h1:R(c,96,1.167,-1.5),h2:R(c,60,1.2,-.5),h3:R(f,48,1.167,0),h4:R(f,34,1.235,.25),h5:R(f,24,1.334,0),h6:R(h,20,1.6,.15),subtitle1:R(f,16,1.75,.15),subtitle2:R(h,14,1.57,.1),body1:R(f,16,1.5,.15),body2:R(f,14,1.43,.15),button:R(h,14,1.75,.4,Yn),caption:R(f,12,1.66,.4),overline:R(f,12,2.66,1,Yn)};return rn(r({htmlFontSize:v,pxToRem:E,round:$n,fontFamily:a,fontSize:s,fontWeightLight:c,fontWeightRegular:f,fontWeightMedium:h,fontWeightBold:g},C),S,{clone:!1})}function Xn(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const Zn=["none",Xn(0,2,1,-1,0,1,1,0,0,1,3,0),Xn(0,3,1,-2,0,2,2,0,0,1,5,0),Xn(0,3,3,-2,0,3,4,0,0,1,8,0),Xn(0,2,4,-1,0,4,5,0,0,1,10,0),Xn(0,3,5,-1,0,5,8,0,0,1,14,0),Xn(0,3,5,-1,0,6,10,0,0,1,18,0),Xn(0,4,5,-2,0,7,10,1,0,2,16,1),Xn(0,5,5,-3,0,8,10,1,0,3,14,2),Xn(0,5,6,-3,0,9,12,1,0,3,16,2),Xn(0,6,6,-3,0,10,14,1,0,4,18,3),Xn(0,6,7,-4,0,11,15,1,0,4,20,3),Xn(0,7,8,-4,0,12,17,2,0,5,22,4),Xn(0,7,8,-4,0,13,19,2,0,5,24,4),Xn(0,7,9,-4,0,14,21,2,0,5,26,4),Xn(0,8,9,-5,0,15,22,2,0,6,28,5),Xn(0,8,10,-5,0,16,24,2,0,6,30,5),Xn(0,8,11,-5,0,17,26,2,0,6,32,5),Xn(0,9,11,-5,0,18,28,2,0,7,34,6),Xn(0,9,12,-6,0,19,29,2,0,7,36,6),Xn(0,10,13,-6,0,20,31,3,0,8,38,7),Xn(0,10,13,-6,0,21,33,3,0,8,40,7),Xn(0,10,14,-6,0,22,35,3,0,8,42,7),Xn(0,11,14,-7,0,23,36,3,0,9,44,8),Xn(0,11,15,-7,0,24,38,3,0,9,46,8)],Jn={borderRadius:4};var er={xs:0,sm:600,md:960,lg:1280,xl:1920},tr={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(er[e],"px)")}};function nr(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||tr;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===tn(t)){var o=e.theme.breakpoints||tr;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}const rr=function(e,t){return t?rn(e,t,{clone:!1}):e};var or={m:"margin",p:"padding"},ir={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},ar={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},lr=function(e){var t={};return function(e){return void 0===t[e]&&(t[e]=function(e){if(e.length>2){if(!ar[e])return[e];e=ar[e]}var t=(a=e.split(""),l=2,function(e){if(Array.isArray(e))return e}(a)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(a,l)||Xe(a,l)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=t[0],r=t[1],o=or[n],i=ir[r]||"";var a,l;return Array.isArray(i)?i.map((function(e){return o+e})):[o+i]}(e)),t[e]}}(),sr=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function ur(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function cr(e){var t=ur(e.theme);return Object.keys(e).map((function(n){if(-1===sr.indexOf(n))return null;var r=function(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(lr(n),t),o=e[n];return nr(e,o,r)})).reduce(rr,{})}cr.propTypes={},cr.filterProps=sr;const dr=cr;function fr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=ur({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var pr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},hr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function mr(e){return"".concat(Math.round(e),"ms")}const gr={easing:pr,duration:hr,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?hr.standard:n,o=t.easing,a=void 0===o?pr.easeInOut:o,l=t.delay,s=void 0===l?0:l;return i(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:mr(r)," ").concat(a," ").concat("string"==typeof s?s:mr(s))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},yr={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},vr=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,a=e.palette,l=void 0===a?{}:a,s=e.spacing,u=e.typography,c=void 0===u?{}:u,d=i(e,["breakpoints","mixins","palette","spacing","typography"]),f=Gn(l),p=hn(n),h=fr(s),m=rn({breakpoints:p,direction:"ltr",mixins:gn(p,h,o),overrides:{},palette:f,props:{},shadows:Zn,typography:qn(f,c),spacing:h,shape:Jn,transitions:gr,zIndex:yr},d),g=arguments.length,y=new Array(g>1?g-1:0),v=1;v<g;v++)y[v-1]=arguments[v];return y.reduce((function(e,t){return rn(e,t)}),m)}(),br=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return fn(e,r({defaultTheme:vr},t))};function wr(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=wr(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function Sr(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=wr(e))&&(r&&(r+=" "),r+=t);return r}var kr=n(679),Er=n.n(kr);function Rr(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}const Cr=function(t,n){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(o){var a=n.defaultTheme,l=n.withTheme,s=void 0!==l&&l,u=n.name,c=i(n,["defaultTheme","withTheme","name"]),d=u,f=fn(t,r({defaultTheme:a,Component:o,name:u||o.displayName,classNamePrefix:d},c)),p=e.forwardRef((function(t,n){t.classes;var l,c=t.innerRef,d=i(t,["classes","innerRef"]),p=f(r(r({},o.defaultProps),t)),h=d;return("string"==typeof u||s)&&(l=Ee()||a,u&&(h=Rr({theme:l,name:u,props:d})),s&&!h.theme&&(h.theme=l)),e.createElement(o,r({ref:c||n,classes:p},h))}));return Er()(p,o),p}}(t,r({defaultTheme:vr},n))};function xr(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Ar(t,n){return e.useMemo((function(){return null==t&&null==n?null:function(e){xr(t,e),xr(n,e)}}),[t,n])}var Nr="undefined"!=typeof window?e.useLayoutEffect:e.useEffect;function Ir(t){var n=e.useRef(t);return Nr((function(){n.current=t})),e.useCallback((function(){return n.current.apply(void 0,arguments)}),[])}var Tr=!0,Or=!1,Pr=null,Mr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Dr(e){e.metaKey||e.altKey||e.ctrlKey||(Tr=!0)}function _r(){Tr=!1}function Lr(){"hidden"===this.visibilityState&&Or&&(Tr=!0)}function zr(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return Tr||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!Mr[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function Fr(){Or=!0,window.clearTimeout(Pr),Pr=window.setTimeout((function(){Or=!1}),100)}function Ur(){return{isFocusVisible:zr,onBlurVisible:Fr,ref:e.useCallback((function(e){var n,r=t.findDOMNode(e);null!=r&&((n=r.ownerDocument).addEventListener("keydown",Dr,!0),n.addEventListener("mousedown",_r,!0),n.addEventListener("pointerdown",_r,!0),n.addEventListener("touchstart",_r,!0),n.addEventListener("visibilitychange",Lr,!0))}),[])}}const jr=e.createContext(null);function Wr(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function Hr(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Vr(t,n,r){var o=Wr(t.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}(n,o);return Object.keys(i).forEach((function(a){var l=i[a];if((0,e.isValidElement)(l)){var s=a in n,u=a in o,c=n[a],d=(0,e.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,e.isValidElement)(c)&&(i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:Hr(l,"exit",t),enter:Hr(l,"enter",t)})):i[a]=(0,e.cloneElement)(l,{in:!1}):i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Hr(l,"exit",t),enter:Hr(l,"enter",t)})}})),i}var Br=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Kr=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind(d(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}c(n,t);var i=n.prototype;return i.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},i.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=t,o=a,Wr(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:Hr(t,"appear",r),enter:Hr(t,"enter",r),exit:Hr(t,"exit",r)})}))):Vr(t,i,a),firstRender:!1}},i.handleExited=function(e,t){var n=Wr(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=r({},t.children);return delete n[e.key],{children:n}})))},i.render=function(){var t=this.props,n=t.component,r=t.childFactory,i=o(t,["component","childFactory"]),a=this.state.contextValue,l=Br(this.state.children).map(r);return delete i.appear,delete i.enter,delete i.exit,null===n?e.createElement(jr.Provider,{value:a},l):e.createElement(jr.Provider,{value:a},e.createElement(n,i,l))},n}(e.Component);Kr.propTypes={},Kr.defaultProps={component:"div",childFactory:function(e){return e}};const Gr=Kr;var $r="undefined"==typeof window?e.useEffect:e.useLayoutEffect;const Yr=function(t){var n=t.classes,r=t.pulsate,o=void 0!==r&&r,i=t.rippleX,a=t.rippleY,l=t.rippleSize,s=t.in,u=t.onExited,c=void 0===u?function(){}:u,d=t.timeout,f=e.useState(!1),p=f[0],h=f[1],m=Sr(n.ripple,n.rippleVisible,o&&n.ripplePulsate),g={width:l,height:l,top:-l/2+a,left:-l/2+i},y=Sr(n.child,p&&n.childLeaving,o&&n.childPulsate),v=Ir(c);return $r((function(){if(!s){h(!0);var e=setTimeout(v,d);return function(){clearTimeout(e)}}}),[v,s,d]),e.createElement("span",{className:m,style:g},e.createElement("span",{className:y}))};var Qr=e.forwardRef((function(t,n){var o=t.center,a=void 0!==o&&o,l=t.classes,s=t.className,u=i(t,["center","classes","className"]),c=e.useState([]),d=c[0],f=c[1],p=e.useRef(0),h=e.useRef(null);e.useEffect((function(){h.current&&(h.current(),h.current=null)}),[d]);var m=e.useRef(!1),g=e.useRef(null),y=e.useRef(null),v=e.useRef(null);e.useEffect((function(){return function(){clearTimeout(g.current)}}),[]);var b=e.useCallback((function(t){var n=t.pulsate,r=t.rippleX,o=t.rippleY,i=t.rippleSize,a=t.cb;f((function(t){return[].concat(Ze(t),[e.createElement(Yr,{key:p.current,classes:l,timeout:550,pulsate:n,rippleX:r,rippleY:o,rippleSize:i})])})),p.current+=1,h.current=a}),[l]),w=e.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,o=void 0!==r&&r,i=t.center,l=void 0===i?a||t.pulsate:i,s=t.fakeElement,u=void 0!==s&&s;if("mousedown"===e.type&&m.current)m.current=!1;else{"touchstart"===e.type&&(m.current=!0);var c,d,f,p=u?null:v.current,h=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(h.width/2),d=Math.round(h.height/2);else{var w=e.touches?e.touches[0]:e,S=w.clientX,k=w.clientY;c=Math.round(S-h.left),d=Math.round(k-h.top)}if(l)(f=Math.sqrt((2*Math.pow(h.width,2)+Math.pow(h.height,2))/3))%2==0&&(f+=1);else{var E=2*Math.max(Math.abs((p?p.clientWidth:0)-c),c)+2,R=2*Math.max(Math.abs((p?p.clientHeight:0)-d),d)+2;f=Math.sqrt(Math.pow(E,2)+Math.pow(R,2))}e.touches?null===y.current&&(y.current=function(){b({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})},g.current=setTimeout((function(){y.current&&(y.current(),y.current=null)}),80)):b({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})}}),[a,b]),S=e.useCallback((function(){w({},{pulsate:!0})}),[w]),k=e.useCallback((function(e,t){if(clearTimeout(g.current),"touchend"===e.type&&y.current)return e.persist(),y.current(),y.current=null,void(g.current=setTimeout((function(){k(e,t)})));y.current=null,f((function(e){return e.length>0?e.slice(1):e})),h.current=t}),[]);return e.useImperativeHandle(n,(function(){return{pulsate:S,start:w,stop:k}}),[S,w,k]),e.createElement("span",r({className:Sr(l.root,s),ref:v},u),e.createElement(Gr,{component:null,exit:!0},d))}));const qr=Cr((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(e.memo(Qr));var Xr=e.forwardRef((function(n,o){var a=n.action,l=n.buttonRef,s=n.centerRipple,u=void 0!==s&&s,c=n.children,d=n.classes,f=n.className,p=n.component,h=void 0===p?"button":p,m=n.disabled,g=void 0!==m&&m,y=n.disableRipple,v=void 0!==y&&y,b=n.disableTouchRipple,w=void 0!==b&&b,S=n.focusRipple,k=void 0!==S&&S,E=n.focusVisibleClassName,R=n.onBlur,C=n.onClick,x=n.onFocus,A=n.onFocusVisible,N=n.onKeyDown,I=n.onKeyUp,T=n.onMouseDown,O=n.onMouseLeave,P=n.onMouseUp,M=n.onTouchEnd,D=n.onTouchMove,_=n.onTouchStart,L=n.onDragLeave,z=n.tabIndex,F=void 0===z?0:z,U=n.TouchRippleProps,j=n.type,W=void 0===j?"button":j,H=i(n,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),V=e.useRef(null),B=e.useRef(null),K=e.useState(!1),G=K[0],$=K[1];g&&G&&$(!1);var Y=Ur(),Q=Y.isFocusVisible,q=Y.onBlurVisible,X=Y.ref;function Z(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:w;return Ir((function(r){return t&&t(r),!n&&B.current&&B.current[e](r),!0}))}e.useImperativeHandle(a,(function(){return{focusVisible:function(){$(!0),V.current.focus()}}}),[]),e.useEffect((function(){G&&k&&!v&&B.current.pulsate()}),[v,k,G]);var J=Z("start",T),ee=Z("stop",L),te=Z("stop",P),ne=Z("stop",(function(e){G&&e.preventDefault(),O&&O(e)})),re=Z("start",_),oe=Z("stop",M),ie=Z("stop",D),ae=Z("stop",(function(e){G&&(q(e),$(!1)),R&&R(e)}),!1),le=Ir((function(e){V.current||(V.current=e.currentTarget),Q(e)&&($(!0),A&&A(e)),x&&x(e)})),se=function(){var e=t.findDOMNode(V.current);return h&&"button"!==h&&!("A"===e.tagName&&e.href)},ue=e.useRef(!1),ce=Ir((function(e){k&&!ue.current&&G&&B.current&&" "===e.key&&(ue.current=!0,e.persist(),B.current.stop(e,(function(){B.current.start(e)}))),e.target===e.currentTarget&&se()&&" "===e.key&&e.preventDefault(),N&&N(e),e.target===e.currentTarget&&se()&&"Enter"===e.key&&!g&&(e.preventDefault(),C&&C(e))})),de=Ir((function(e){k&&" "===e.key&&B.current&&G&&!e.defaultPrevented&&(ue.current=!1,e.persist(),B.current.stop(e,(function(){B.current.pulsate(e)}))),I&&I(e),C&&e.target===e.currentTarget&&se()&&" "===e.key&&!e.defaultPrevented&&C(e)})),fe=h;"button"===fe&&H.href&&(fe="a");var pe={};"button"===fe?(pe.type=W,pe.disabled=g):("a"===fe&&H.href||(pe.role="button"),pe["aria-disabled"]=g);var he=Ar(l,o),me=Ar(X,V),ge=Ar(he,me),ye=e.useState(!1),ve=ye[0],be=ye[1];e.useEffect((function(){be(!0)}),[]);var we=ve&&!v&&!g;return e.createElement(fe,r({className:Sr(d.root,f,G&&[d.focusVisible,E],g&&d.disabled),onBlur:ae,onClick:C,onFocus:le,onKeyDown:ce,onKeyUp:de,onMouseDown:J,onMouseLeave:ne,onMouseUp:te,onDragLeave:ee,onTouchEnd:oe,onTouchMove:ie,onTouchStart:re,ref:ge,tabIndex:g?-1:F},pe,H),c,we?e.createElement(qr,r({ref:B,center:u},U)):null)}));const Zr=Cr({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Xr);function Jr(e){if("string"!=typeof e)throw new Error(yn(7));return e.charAt(0).toUpperCase()+e.slice(1)}var eo=e.forwardRef((function(t,n){var o=t.children,a=t.classes,l=t.className,s=t.color,u=void 0===s?"default":s,c=t.component,d=void 0===c?"button":c,f=t.disabled,p=void 0!==f&&f,h=t.disableElevation,m=void 0!==h&&h,g=t.disableFocusRipple,y=void 0!==g&&g,v=t.endIcon,b=t.focusVisibleClassName,w=t.fullWidth,S=void 0!==w&&w,k=t.size,E=void 0===k?"medium":k,R=t.startIcon,C=t.type,x=void 0===C?"button":C,A=t.variant,N=void 0===A?"text":A,I=i(t,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),T=R&&e.createElement("span",{className:Sr(a.startIcon,a["iconSize".concat(Jr(E))])},R),O=v&&e.createElement("span",{className:Sr(a.endIcon,a["iconSize".concat(Jr(E))])},v);return e.createElement(Zr,r({className:Sr(a.root,a[N],l,"inherit"===u?a.colorInherit:"default"!==u&&a["".concat(N).concat(Jr(u))],"medium"!==E&&[a["".concat(N,"Size").concat(Jr(E))],a["size".concat(Jr(E))]],m&&a.disableElevation,p&&a.disabled,S&&a.fullWidth),component:d,disabled:p,focusRipple:!y,focusVisibleClassName:Sr(a.focusVisible,b),ref:n,type:x},I),e.createElement("span",{className:a.label},T,o,O))}));const to=Cr((function(e){return{root:r({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:Hn(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Hn(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Hn(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(Hn(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:Hn(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(Hn(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:Hn(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(eo);var no=br({layout:{display:"flex",alignItems:"center",justifyContent:"center",width:"100%",height:"100%"}});const ro=function(t){var n=t.onScanStart,r=no();return e.createElement("div",{className:r.layout},e.createElement(to,{variant:"contained",color:"primary",onClick:n},"Scan ID document"))};function oo(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))}let io=0;class ao{constructor(e){this.action=e,this.messageID=function(){const e=io;return io+=1,e}()}}class lo extends ao{constructor(e,t){super(lo.action),this.wasmModuleName=e.wasmModuleName,this.licenseKey=e.licenseKey,this.userId=t,this.registerLoadCallback=null!==e.loadProgressCallback,this.allowHelloMessage=e.allowHelloMessage,this.engineLocation=e.engineLocation}}var so,uo,co,fo,po;lo.action="init",function(e){e[e.Any=0]="Any",e[e.Recognizer=1]="Recognizer",e[e.RecognizerSettings=2]="RecognizerSettings",e[e.Callback=3]="Callback"}(so||(so={}));class ho extends ao{constructor(e,t){super(ho.action),this.className=e,this.params=t}}ho.action="createNewNativeObject";class mo extends ao{constructor(e,t,n){super(mo.action),this.recognizerHandles=e,this.allowMultipleResults=t,this.registeredMetadataCallbacks=n}}mo.action="createRecognizerRunner";class go extends ao{constructor(e,t){super(go.action),this.recognizerHandles=e,this.allowMultipleResults=t}}go.action="reconfigureRecognizerRunner";class yo extends ao{constructor(){super(yo.action)}}yo.action="deleteRecognizerRunner";class vo extends ao{constructor(e,t,n){super(vo.action),this.objectHandle=e,this.methodName=t,this.params=n}}vo.action="invokeObject";class bo extends ao{constructor(e){super(bo.action),this.frame=e}getTransferrables(){return[this.frame.imageData.data.buffer]}}bo.action="processImage";class wo extends ao{constructor(e){super(wo.action),this.hardReset=e}}wo.action="resetRecognizers";class So{constructor(){this.onDebugText=!1,this.onDetectionFailed=!1,this.onQuadDetection=!1,this.onPointsDetection=!1,this.onFirstSideResult=!1,this.onGlare=!1}}class ko extends ao{constructor(e){super(ko.action),this.registeredMetadataCallbacks=e}}ko.action="registerMetadataCallbacks";class Eo extends ao{constructor(e){super(Eo.action),this.detectionOnlyMode=e}}Eo.action="setDetectionOnly";class Ro extends ao{constructor(e){super(Ro.action),this.callbackNonEmpty=e}}Ro.action="setClearTimeoutCallback";class Co extends ao{constructor(e){super(Co.action),this.cameraPreviewMirrored=e}}function xo(e,t){return n=>{const r=n;r.success?e():t(r.error)}}function Ao(e,t){return n=>{const r=n;r.success?e(n):t(r.error)}}Co.action="setCameraPreviewMirrored",function(e){e[e.onDebugText=0]="onDebugText",e[e.onDetectionFailed=1]="onDetectionFailed",e[e.onQuadDetection=2]="onQuadDetection",e[e.onPointsDetection=3]="onPointsDetection",e[e.onFirstSideResult=4]="onFirstSideResult",e[e.clearTimeoutCallback=5]="clearTimeoutCallback",e[e.onGlare=6]="onGlare",e[e.recognizerCallback=7]="recognizerCallback"}(uo||(uo={}));class No{constructor(e,t,n){this.wasmSDKWorker=e,this.objectHandle=n,this.recognizerName=t,this.callbacks=new Map}getRemoteObjectHandle(){return this.objectHandle}currentSettings(){return new Promise(((e,t)=>{if(this.objectHandle<0)return void t("Invalid object handle: "+this.objectHandle.toString());const n=new vo(this.objectHandle,"currentSettings",[]),r=Ao((t=>{e(t.result)}),t);this.wasmSDKWorker.postMessage(n,r)}))}clearAllCallbacks(){this.callbacks.clear(),this.wasmSDKWorker.unregisterRecognizerCallbacks(this.objectHandle)}removeFunctions(e){this.clearAllCallbacks();const t=Object.keys(e);let n=!1;for(const r of t){const t=e[r];if("function"==typeof t){this.callbacks.set(r,t);const o={parameter:{recognizerHandle:this.objectHandle,callbackName:r},type:so.Callback};e[r]=o,n=!0}}return n&&this.wasmSDKWorker.registerRecognizerCallbacks(this.objectHandle,this),e}updateSettings(e){return new Promise(((t,n)=>{if(this.objectHandle<0)return void n("Invalid object handle: "+this.objectHandle.toString());const r=new vo(this.objectHandle,"updateSettings",[{parameter:this.removeFunctions(e),type:so.RecognizerSettings}]),o=xo(t,n);this.wasmSDKWorker.postMessage(r,o)}))}invokeCallback(e,t){const n=this.callbacks.get(e);void 0!==n?n(...t):console.warn("Cannot find callback",e)}getResult(){return new Promise(((e,t)=>{if(this.objectHandle<0)return void t("Invalid object handle: "+this.objectHandle.toString());const n=new vo(this.objectHandle,"getResult",[]),r=Ao((t=>{e(t.result)}),t);this.wasmSDKWorker.postMessage(n,r)}))}delete(){return new Promise(((e,t)=>{if(this.objectHandle<0)return void t("Invalid object handle: "+this.objectHandle.toString());this.clearAllCallbacks();const n=new vo(this.objectHandle,"delete",[]),r=xo((()=>{this.objectHandle=-1,e()}),t);this.wasmSDKWorker.postMessage(n,r)}))}}function Io(e){const t=new So;return t.onDebugText=!!e.onDebugText,t.onDetectionFailed=!!e.onDetectionFailed,t.onPointsDetection=!!e.onPointsDetection,t.onQuadDetection=!!e.onQuadDetection,t.onFirstSideResult=!!e.onFirstSideResult,t.onGlare=!!e.onGlare,t}class To{constructor(e){this.deleted=!1,this.wasmSDKWorker=e}processImage(e){return new Promise(((t,n)=>{if(this.deleted)return void n("Recognizer runner is deleted. It cannot be used anymore!");const r=new bo(e),o=Ao((e=>{const n=e.recognitionState;t(n)}),n);this.wasmSDKWorker.postTransferrableMessage(r,o)}))}reconfigureRecognizers(e,t){return new Promise(((n,r)=>{if(this.deleted)return void r("Recognizer runner is deleted. It cannot be used anymore!");const o=Oo(e),i=new go(o,t),a=xo(n,r);this.wasmSDKWorker.postMessage(i,a)}))}setMetadataCallbacks(e){return new Promise(((t,n)=>{const r=new ko(Io(e)),o=xo(t,n);this.wasmSDKWorker.postMessageAndRegisterCallbacks(r,e,o)}))}resetRecognizers(e){return new Promise(((t,n)=>{const r=new wo(e),o=xo(t,n);this.wasmSDKWorker.postMessage(r,o)}))}setDetectionOnlyMode(e){return new Promise(((t,n)=>{const r=new Eo(e),o=xo(t,n);this.wasmSDKWorker.postMessage(r,o)}))}setClearTimeoutCallback(e){return new Promise(((t,n)=>{const r=new Ro(null!==e),o=xo(t,n);this.wasmSDKWorker.registerClearTimeoutCallback(e),this.wasmSDKWorker.postMessage(r,o)}))}setCameraPreviewMirrored(e){return new Promise(((t,n)=>{const r=new Co(e),o=xo(t,n);this.wasmSDKWorker.postMessage(r,o)}))}delete(){return this.deleted?Promise.reject("Recognizer runner is already deleted."):new Promise(((e,t)=>{const n=new yo,r=xo((()=>{this.deleted=!0,e()}),t);this.wasmSDKWorker.postMessage(n,r)}))}}function Oo(e){const t=[];for(const n of e)t.push(n.getRemoteObjectHandle());return t}class Po{constructor(e){this.wasmSDKWorker=e}createRecognizerRunner(e,t=!1,n={}){return new Promise(((r,o)=>{const i=Oo(e),a=new mo(i,t,Io(n)),l=xo((()=>{r(new To(this.wasmSDKWorker))}),o);this.wasmSDKWorker.postMessageAndRegisterCallbacks(a,n,l)}))}newRecognizer(e,...t){return new Promise(((n,r)=>{const o=new ho(e,function(e){const t=[];for(let n of e){let e=so.Any;n instanceof No&&(e=so.Recognizer,n=n.getRemoteObjectHandle()),t.push({parameter:n,type:e})}return t}(t)),i=Ao((t=>{const r=new No(this.wasmSDKWorker,e,t.objectHandle);n(r)}),r);this.wasmSDKWorker.postMessage(o,i)}))}}class Mo{constructor(e,t,n){this.eventHandlers={},this.metadataCallbacks={},this.clearTimeoutCallback=null,this.mbWasmWorker=e,this.mbWasmWorker.onmessage=e=>{this.handleWorkerEvent(e)},this.mbWasmWorker.onerror=()=>{n("Problem during initialization of worker file!")},this.mbWasmModule=new Po(this),this.loadCallback=t,this.recognizersWithCallbacks=new Map,this.showOverlay=!1}postMessage(e,t){this.eventHandlers[e.messageID]=t,this.mbWasmWorker.postMessage(e)}postTransferrableMessage(e,t){this.eventHandlers[e.messageID]=t,this.mbWasmWorker.postMessage(e,e.getTransferrables())}postMessageAndRegisterCallbacks(e,t,n){this.eventHandlers[e.messageID]=n,this.metadataCallbacks=t,this.mbWasmWorker.postMessage(e)}registerClearTimeoutCallback(e){this.clearTimeoutCallback=e}registerRecognizerCallbacks(e,t){this.recognizersWithCallbacks.set(e,t)}unregisterRecognizerCallbacks(e){this.recognizersWithCallbacks.delete(e)}handleWorkerEvent(e){if("isCallbackMessage"in e.data){const t=e.data;switch(t.callbackType){case uo.onDebugText:"function"==typeof this.metadataCallbacks.onDebugText&&this.metadataCallbacks.onDebugText(t.callbackParameters[0]);break;case uo.onDetectionFailed:"function"==typeof this.metadataCallbacks.onDetectionFailed&&this.metadataCallbacks.onDetectionFailed();break;case uo.onPointsDetection:"function"==typeof this.metadataCallbacks.onPointsDetection&&this.metadataCallbacks.onPointsDetection(t.callbackParameters[0]);break;case uo.onQuadDetection:"function"==typeof this.metadataCallbacks.onQuadDetection&&this.metadataCallbacks.onQuadDetection(t.callbackParameters[0]);break;case uo.onFirstSideResult:"function"==typeof this.metadataCallbacks.onFirstSideResult&&this.metadataCallbacks.onFirstSideResult();break;case uo.clearTimeoutCallback:this.clearTimeoutCallback&&"function"==typeof this.clearTimeoutCallback.onClearTimeout&&this.clearTimeoutCallback.onClearTimeout();break;case uo.onGlare:"function"==typeof this.metadataCallbacks.onGlare&&this.metadataCallbacks.onGlare(t.callbackParameters[0]);break;case uo.recognizerCallback:{const e=t.callbackParameters.shift(),n=this.recognizersWithCallbacks.get(e.recognizerHandle);void 0!==n?n.invokeCallback(e.callbackName,t.callbackParameters):console.warn("Cannot find recognizer to deliver callback message. Maybe it's destroyed?",e);break}default:throw new Error("Unknown callback type: "+uo[t.callbackType])}}else if("isLoadProgressMessage"in e.data){const t=e.data;"function"==typeof this.loadCallback&&this.loadCallback(t.progress)}else{const t=e.data,n=this.eventHandlers[t.messageID];delete this.eventHandlers[t.messageID],n(t)}}static createWasmWorker(e,t,n){return oo(this,void 0,void 0,(function*(){return new Promise(((r,o)=>{const i=new Mo(e,t.loadProgressCallback,o),a=new lo(t,n),l=Ao((e=>{i.showOverlay=e.showOverlay,r(i)}),o);i.postMessage(a,l)}))}))}}let Do;!function(e){e[e.RotatedLeft90=0]="RotatedLeft90",e[e.NoRotation=1]="NoRotation",e[e.RotatedRight90=2]="RotatedRight90",e[e.Rotated180=3]="Rotated180"}(co||(co={})),function(e){e[e.Empty=0]="Empty",e[e.Uncertain=1]="Uncertain",e[e.Valid=2]="Valid"}(fo||(fo={})),function(e){e[e.Fail=0]="Fail",e[e.Success=1]="Success",e[e.CameraTooHigh=2]="CameraTooHigh",e[e.FallbackSuccess=3]="FallbackSuccess",e[e.Partial=4]="Partial",e[e.CameraAtAngle=5]="CameraAtAngle",e[e.CameraTooNear=6]="CameraTooNear",e[e.DocumentTooCloseToEdge=7]="DocumentTooCloseToEdge"}(po||(po={}));class _o{constructor(e,t,n){this.imageData=e,this.orientation=t,this.videoFrame=n}}var Lo,zo,Fo;!function(e){e[e.BackFacingCamera=0]="BackFacingCamera",e[e.FrontFacingCamera=1]="FrontFacingCamera"}(Lo||(Lo={})),function(e){e.MediaDevicesNotSupported="MediaDevicesNotSupported",e.CameraNotFound="CameraNotFound",e.CameraNotAllowed="CameraNotAllowed",e.CameraInUse="CameraInUse",e.CameraNotAvailable="CameraNotAvailable",e.VideoElementNotProvided="VideoElementNotProvided"}(zo||(zo={}));class Uo extends Error{constructor(e,...t){super(...t),this.reason=e,this.name="VideoRecognizerError"}}!function(e){e[e.Recognition=0]="Recognition",e[e.RecognitionTest=1]="RecognitionTest",e[e.DetectionTest=2]="DetectionTest"}(Fo||(Fo={}));class jo{constructor(e,t,n=!1){this.videoFeed=null,this.cancelled=!1,this.timedOut=!1,this.recognitionPaused=!1,this.recognitionTimeoutMs=3e4,this.timeoutID=0,this.videoRecognitionMode=Fo.Recognition,this.onScanningDone=null,this.allowManualVideoPlayout=!1,this.videoFeed=e,this.recognizerRunner=t,n&&(this.allowManualVideoPlayout=n)}static createVideoRecognizerFromCameraStream(e,t,n=Lo.BackFacingCamera){return oo(this,void 0,void 0,(function*(){return new Promise(((r,o)=>oo(this,void 0,void 0,(function*(){if(e&&e instanceof Element)if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)try{const i=yield function(e){return oo(this,void 0,void 0,(function*(){const t=[],n=[];{let e=yield navigator.mediaDevices.enumerateDevices();if(e.filter((e=>"videoinput"===e.kind)).every((e=>""===e.label))){const t=yield navigator.mediaDevices.getUserMedia({video:{facingMode:{ideal:"environment"}},audio:!1});e=yield navigator.mediaDevices.enumerateDevices(),t.getTracks().forEach((e=>e.stop()))}const r=e.filter((e=>"videoinput"===e.kind));for(const e of r)Ho(e.label)?n.push(new Vo(e,Lo.BackFacingCamera)):t.push(new Vo(e,Lo.FrontFacingCamera))}if(t.length>0||n.length>0){let r=n.length>0?n:t;e===Lo.BackFacingCamera&&n.length>0&&(r=n),e===Lo.FrontFacingCamera&&t.length>0&&(r=t),r=r.sort(((e,t)=>e.label.localeCompare(t.label)));{let e=0;const t=r.map((e=>{const t=RegExp(/\b([0-9]+)MP?\b/,"i").exec(e.label);return null!==t?parseInt(t[1],10):NaN}));return t.some((e=>isNaN(e)))||(e=t.lastIndexOf(Math.max(...t))),r[e]}}return null}))}(n);if(null===i)return void o(new Uo(zo.CameraNotFound));const a={audio:!1,video:{width:{min:640,ideal:1920,max:1920},height:{min:480,ideal:1080,max:1080}}};if(""===i.deviceId){const e=n===Lo.BackFacingCamera;a.video.facingMode={ideal:e?"environment":"user"}}else a.video.deviceId={exact:i.deviceId};const l=yield navigator.mediaDevices.getUserMedia(a);e.controls=!1,e.srcObject=l,i.facing===Lo.FrontFacingCamera&&(e.style.transform="scaleX(-1)");const s=i.facing===Lo.FrontFacingCamera;yield t.setCameraPreviewMirrored(s),r(new jo(e,t))}catch(e){let t=zo.CameraInUse;switch(e.name){case"NotFoundError":case"OverconstrainedError":t=zo.CameraNotFound;break;case"NotAllowedError":case"SecurityError":t=zo.CameraNotAllowed;break;case"AbortError":case"NotReadableError":t=zo.CameraNotAvailable;break;case"TypeError":throw e}o(new Uo(t,e.message))}else o(new Uo(zo.MediaDevicesNotSupported));else{const e="Video element, i.e. camera feed is not provided!";o(new Uo(zo.VideoElementNotProvided,e))}}))))}))}static createVideoRecognizerFromVideoPath(e,t,n){return oo(this,void 0,void 0,(function*(){return new Promise((r=>{t.src=e,t.currentTime=0,t.onended=()=>{o.cancelRecognition()};const o=new jo(t,n);r(o)}))}))}setVideoRecognitionMode(e){return oo(this,void 0,void 0,(function*(){this.videoRecognitionMode=e;const t=this.videoRecognitionMode===Fo.DetectionTest;yield this.recognizerRunner.setDetectionOnlyMode(t)}))}startRecognition(e,t=3e4){if(null===this.videoFeed)throw new Error("The associated video feed has been released!");if(!this.videoFeed.paused)throw new Error("The associated video feed is not paused. Use resumeRecognition instead!");this.cancelled=!1,this.recognitionPaused=!1,this.clearTimeout(),this.recognitionTimeoutMs=t,this.onScanningDone=e,this.recognizerRunner.setClearTimeoutCallback({onClearTimeout:()=>this.clearTimeout()}),this.videoFeed.play().then((()=>this.playPauseEvent()),(e=>{if(!this.allowManualVideoPlayout)throw console.warn("Native error",e),new Error("The play() request was interrupted or prevented by browser security rules!");this.videoFeed&&(this.videoFeed.controls=!0,this.videoFeed.addEventListener("play",(()=>this.playPauseEvent())),this.videoFeed.addEventListener("pause",(()=>this.playPauseEvent())))}))}recognize(e=3e4){return oo(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{try{this.startRecognition((e=>{this.pauseVideoFeed(),t(e)}),e)}catch(e){n(e)}}))}))}cancelRecognition(){this.cancelled=!0}pauseVideoFeed(){this.pauseRecognition(),this.videoFeed&&this.videoFeed.pause()}pauseRecognition(){this.recognitionPaused=!0}resetRecognizers(e){return oo(this,void 0,void 0,(function*(){yield this.recognizerRunner.resetRecognizers(e)}))}getRecognizerRunner(){return this.recognizerRunner}resumeRecognition(e){if(this.cancelled=!1,this.timedOut=!1,this.recognitionPaused=!1,this.videoFeed&&this.videoFeed.paused)throw new Error("Cannot resume recognition while video feed is paused! Use recognize or startRecognition");setTimeout((()=>{e?this.resetRecognizers(!0).then((()=>{this.recognitionLoop()})).catch((()=>{throw new Error("Could not reset recognizers!")})):this.recognitionLoop()}),1)}releaseVideoFeed(){null!==this.videoFeed&&(null!==this.videoFeed.srcObject&&(this.videoFeed.paused||this.cancelRecognition(),this.videoFeed.srcObject.getTracks().forEach((e=>e.stop())),this.videoFeed.srcObject=null),this.videoFeed=null)}playPauseEvent(){this.videoFeed&&this.videoFeed.paused?this.cancelRecognition():this.resumeRecognition(!0)}recognitionLoop(){return oo(this,void 0,void 0,(function*(){if(!this.videoFeed)throw new Error("Missing video feed!");const e=function(e){let t,n,r=!1;if(e instanceof HTMLVideoElement)t=e.videoWidth,n=e.videoHeight,r=!0;else if(e instanceof HTMLImageElement)t=e.naturalWidth,n=e.naturalHeight;else{if(e instanceof SVGImageElement)throw new Error("Recognition of SVG elements not supported!");t=e.width,n=e.height}Do=Do||document.createElement("canvas"),Do.width=t,Do.height=n;const o=Do.getContext("2d");if(!o)throw new Error("Could not get canvas 2d context!");o.drawImage(e,0,0,Do.width,Do.height);const i=o.getImageData(0,0,Do.width,Do.height);return new _o(i,co.NoRotation,r)}(this.videoFeed),t=yield this.recognizerRunner.processImage(e);t===fo.Valid||this.cancelled||this.timedOut?this.videoRecognitionMode===Fo.Recognition||this.cancelled?(this.clearTimeout(),this.onScanningDone&&this.onScanningDone(t)):(yield this.recognizerRunner.resetRecognizers(!0),this.clearTimeout()):t!==fo.Empty&&0===this.timeoutID&&(this.timeoutID=window.setTimeout((()=>{this.timedOut=!0}),this.recognitionTimeoutMs)),this.recognitionPaused||setTimeout((()=>{this.recognitionLoop()}),1)}))}clearTimeout(){this.timeoutID>0&&(window.clearTimeout(this.timeoutID),this.timeoutID=0)}}const Wo=["rear","back","rück","arrière","trasera","trás","traseira","posteriore","后面","後面","背面","后置","後置","背置","задней","الخلفية","후","arka","achterzijde","หลัง","baksidan","bagside","sau","bak","tylny","takakamera","belakang","אחורית","πίσω","spate","hátsó","zadní","darrere","zadná","задня","stražnja","belakang","बैक"];function Ho(e){const t=e.toLowerCase();return Wo.some((e=>t.includes(e)))}class Vo{constructor(e,t){this.deviceId=e.deviceId,this.facing=t,this.groupId=e.groupId,this.label=e.label}}class Bo{constructor(e){if(this.allowHelloMessage=!0,this.engineLocation="",this.loadProgressCallback=null,this.wasmModuleName="BlinkIDWasmSDK",!e)throw new Error("Missing license key!");this.licenseKey=e}}function Ko(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)))}function Go(e,t,n=!1,r={}){return oo(this,void 0,void 0,(function*(){if("object"!=typeof e)throw new Error("SDK is not provided!");if("object"!=typeof t||t.length<1)throw new Error("To create RecognizerRunner at least 1 recognizer is required.");return e.mbWasmModule.createRecognizerRunner(t,n,r)}))}var $o,Yo,Qo,qo,Xo,Zo,Jo,ei,ti,ni;function ri(e){return oo(this,void 0,void 0,(function*(){return e.mbWasmModule.newRecognizer("BlinkIdRecognizer")}))}function oi(e){return oo(this,void 0,void 0,(function*(){return e.mbWasmModule.newRecognizer("IdBarcodeRecognizer")}))}!function(e){e[e.NONE=0]="NONE",e[e.QR_CODE=1]="QR_CODE",e[e.DATA_MATRIX=2]="DATA_MATRIX",e[e.UPC_E=3]="UPC_E",e[e.UPC_A=4]="UPC_A",e[e.EAN_8=5]="EAN_8",e[e.EAN_13=6]="EAN_13",e[e.CODE_128=7]="CODE_128",e[e.CODE_39=8]="CODE_39",e[e.ITF=9]="ITF",e[e.AZTEC_BARCODE=10]="AZTEC_BARCODE",e[e.PDF417_BARCODE=11]="PDF417_BARCODE"}($o||($o={})),function(e){e[e.None=0]="None",e[e.ImageOnly=1]="ImageOnly",e[e.ResultFieldsOnly=2]="ResultFieldsOnly",e[e.FullResult=3]="FullResult"}(Yo||(Yo={})),function(e){e[e.NONE=0]="NONE",e[e.ALBANIA=1]="ALBANIA",e[e.ALGERIA=2]="ALGERIA",e[e.ARGENTINA=3]="ARGENTINA",e[e.AUSTRALIA=4]="AUSTRALIA",e[e.AUSTRIA=5]="AUSTRIA",e[e.AZERBAIJAN=6]="AZERBAIJAN",e[e.BAHRAIN=7]="BAHRAIN",e[e.BANGLADESH=8]="BANGLADESH",e[e.BELGIUM=9]="BELGIUM",e[e.BOSNIA_AND_HERZEGOVINA=10]="BOSNIA_AND_HERZEGOVINA",e[e.BRUNEI=11]="BRUNEI",e[e.BULGARIA=12]="BULGARIA",e[e.CAMBODIA=13]="CAMBODIA",e[e.CANADA=14]="CANADA",e[e.CHILE=15]="CHILE",e[e.COLOMBIA=16]="COLOMBIA",e[e.COSTA_RICA=17]="COSTA_RICA",e[e.CROATIA=18]="CROATIA",e[e.CYPRUS=19]="CYPRUS",e[e.CZECHIA=20]="CZECHIA",e[e.DENMARK=21]="DENMARK",e[e.DOMINICAN_REPUBLIC=22]="DOMINICAN_REPUBLIC",e[e.EGYPT=23]="EGYPT",e[e.ESTONIA=24]="ESTONIA",e[e.FINLAND=25]="FINLAND",e[e.FRANCE=26]="FRANCE",e[e.GEORGIA=27]="GEORGIA",e[e.GERMANY=28]="GERMANY",e[e.GHANA=29]="GHANA",e[e.GREECE=30]="GREECE",e[e.GUATEMALA=31]="GUATEMALA",e[e.HONG_KONG=32]="HONG_KONG",e[e.HUNGARY=33]="HUNGARY",e[e.INDIA=34]="INDIA",e[e.INDONESIA=35]="INDONESIA",e[e.IRELAND=36]="IRELAND",e[e.ISRAEL=37]="ISRAEL",e[e.ITALY=38]="ITALY",e[e.JORDAN=39]="JORDAN",e[e.KAZAKHSTAN=40]="KAZAKHSTAN",e[e.KENYA=41]="KENYA",e[e.KOSOVO=42]="KOSOVO",e[e.KUWAIT=43]="KUWAIT",e[e.LATVIA=44]="LATVIA",e[e.LITHUANIA=45]="LITHUANIA",e[e.MALAYSIA=46]="MALAYSIA",e[e.MALDIVES=47]="MALDIVES",e[e.MALTA=48]="MALTA",e[e.MAURITIUS=49]="MAURITIUS",e[e.MEXICO=50]="MEXICO",e[e.MOROCCO=51]="MOROCCO",e[e.NETHERLANDS=52]="NETHERLANDS",e[e.NEW_ZEALAND=53]="NEW_ZEALAND",e[e.NIGERIA=54]="NIGERIA",e[e.PAKISTAN=55]="PAKISTAN",e[e.PANAMA=56]="PANAMA",e[e.PARAGUAY=57]="PARAGUAY",e[e.PHILIPPINES=58]="PHILIPPINES",e[e.POLAND=59]="POLAND",e[e.PORTUGAL=60]="PORTUGAL",e[e.PUERTO_RICO=61]="PUERTO_RICO",e[e.QATAR=62]="QATAR",e[e.ROMANIA=63]="ROMANIA",e[e.RUSSIA=64]="RUSSIA",e[e.SAUDI_ARABIA=65]="SAUDI_ARABIA",e[e.SERBIA=66]="SERBIA",e[e.SINGAPORE=67]="SINGAPORE",e[e.SLOVAKIA=68]="SLOVAKIA",e[e.SLOVENIA=69]="SLOVENIA",e[e.SOUTH_AFRICA=70]="SOUTH_AFRICA",e[e.SPAIN=71]="SPAIN",e[e.SWEDEN=72]="SWEDEN",e[e.SWITZERLAND=73]="SWITZERLAND",e[e.TAIWAN=74]="TAIWAN",e[e.THAILAND=75]="THAILAND",e[e.TUNISIA=76]="TUNISIA",e[e.TURKEY=77]="TURKEY",e[e.UAE=78]="UAE",e[e.UGANDA=79]="UGANDA",e[e.UK=80]="UK",e[e.UKRAINE=81]="UKRAINE",e[e.USA=82]="USA",e[e.VIETNAM=83]="VIETNAM",e[e.BRAZIL=84]="BRAZIL",e[e.NORWAY=85]="NORWAY",e[e.OMAN=86]="OMAN",e[e.ECUADOR=87]="ECUADOR",e[e.EL_SALVADOR=88]="EL_SALVADOR",e[e.SRI_LANKA=89]="SRI_LANKA",e[e.PERU=90]="PERU",e[e.URUGUAY=91]="URUGUAY",e[e.COUNT=92]="COUNT"}(Qo||(Qo={})),function(e){e[e.NONE=0]="NONE",e[e.ALABAMA=1]="ALABAMA",e[e.ALASKA=2]="ALASKA",e[e.ALBERTA=3]="ALBERTA",e[e.ARIZONA=4]="ARIZONA",e[e.ARKANSAS=5]="ARKANSAS",e[e.AUSTRALIAN_CAPITAL_TERRITORY=6]="AUSTRALIAN_CAPITAL_TERRITORY",e[e.BRITISH_COLUMBIA=7]="BRITISH_COLUMBIA",e[e.CALIFORNIA=8]="CALIFORNIA",e[e.COLORADO=9]="COLORADO",e[e.CONNECTICUT=10]="CONNECTICUT",e[e.DELAWARE=11]="DELAWARE",e[e.DISTRICT_OF_COLUMBIA=12]="DISTRICT_OF_COLUMBIA",e[e.FLORIDA=13]="FLORIDA",e[e.GEORGIA=14]="GEORGIA",e[e.HAWAII=15]="HAWAII",e[e.IDAHO=16]="IDAHO",e[e.ILLINOIS=17]="ILLINOIS",e[e.INDIANA=18]="INDIANA",e[e.IOWA=19]="IOWA",e[e.KANSAS=20]="KANSAS",e[e.KENTUCKY=21]="KENTUCKY",e[e.LOUISIANA=22]="LOUISIANA",e[e.MAINE=23]="MAINE",e[e.MANITOBA=24]="MANITOBA",e[e.MARYLAND=25]="MARYLAND",e[e.MASSACHUSETTS=26]="MASSACHUSETTS",e[e.MICHIGAN=27]="MICHIGAN",e[e.MINNESOTA=28]="MINNESOTA",e[e.MISSISSIPPI=29]="MISSISSIPPI",e[e.MISSOURI=30]="MISSOURI",e[e.MONTANA=31]="MONTANA",e[e.NEBRASKA=32]="NEBRASKA",e[e.NEVADA=33]="NEVADA",e[e.NEW_BRUNSWICK=34]="NEW_BRUNSWICK",e[e.NEW_HAMPSHIRE=35]="NEW_HAMPSHIRE",e[e.NEW_JERSEY=36]="NEW_JERSEY",e[e.NEW_MEXICO=37]="NEW_MEXICO",e[e.NEW_SOUTH_WALES=38]="NEW_SOUTH_WALES",e[e.NEW_YORK=39]="NEW_YORK",e[e.NORTHERN_TERRITORY=40]="NORTHERN_TERRITORY",e[e.NORTH_CAROLINA=41]="NORTH_CAROLINA",e[e.NORTH_DAKOTA=42]="NORTH_DAKOTA",e[e.NOVA_SCOTIA=43]="NOVA_SCOTIA",e[e.OHIO=44]="OHIO",e[e.OKLAHOMA=45]="OKLAHOMA",e[e.ONTARIO=46]="ONTARIO",e[e.OREGON=47]="OREGON",e[e.PENNSYLVANIA=48]="PENNSYLVANIA",e[e.QUEBEC=49]="QUEBEC",e[e.QUEENSLAND=50]="QUEENSLAND",e[e.RHODE_ISLAND=51]="RHODE_ISLAND",e[e.SASKATCHEWAN=52]="SASKATCHEWAN",e[e.SOUTH_AUSTRALIA=53]="SOUTH_AUSTRALIA",e[e.SOUTH_CAROLINA=54]="SOUTH_CAROLINA",e[e.SOUTH_DAKOTA=55]="SOUTH_DAKOTA",e[e.TASMANIA=56]="TASMANIA",e[e.TENNESSEE=57]="TENNESSEE",e[e.TEXAS=58]="TEXAS",e[e.UTAH=59]="UTAH",e[e.VERMONT=60]="VERMONT",e[e.VICTORIA=61]="VICTORIA",e[e.VIRGINIA=62]="VIRGINIA",e[e.WASHINGTON=63]="WASHINGTON",e[e.WESTERN_AUSTRALIA=64]="WESTERN_AUSTRALIA",e[e.WEST_VIRGINIA=65]="WEST_VIRGINIA",e[e.WISCONSIN=66]="WISCONSIN",e[e.WYOMING=67]="WYOMING",e[e.YUKON=68]="YUKON",e[e.CIUDAD_DE_MEXICO=69]="CIUDAD_DE_MEXICO",e[e.JALISCO=70]="JALISCO",e[e.NEWFOUNDLAND_AND_LABRADOR=71]="NEWFOUNDLAND_AND_LABRADOR",e[e.NUEVO_LEON=72]="NUEVO_LEON",e[e.COUNT=73]="COUNT"}(qo||(qo={})),function(e){e[e.NONE=0]="NONE",e[e.CONSULAR_ID=1]="CONSULAR_ID",e[e.DL=2]="DL",e[e.DL_PUBLIC_SERVICES_CARD=3]="DL_PUBLIC_SERVICES_CARD",e[e.EMPLOYMENT_PASS=4]="EMPLOYMENT_PASS",e[e.FIN_CARD=5]="FIN_CARD",e[e.ID=6]="ID",e[e.MULTIPURPOSE_ID=7]="MULTIPURPOSE_ID",e[e.MyKad=8]="MyKad",e[e.MyKid=9]="MyKid",e[e.MyPR=10]="MyPR",e[e.MyTentera=11]="MyTentera",e[e.PAN_CARD=12]="PAN_CARD",e[e.PROFESSIONAL_ID=13]="PROFESSIONAL_ID",e[e.PUBLIC_SERVICES_CARD=14]="PUBLIC_SERVICES_CARD",e[e.RESIDENCE_PERMIT=15]="RESIDENCE_PERMIT",e[e.RESIDENT_ID=16]="RESIDENT_ID",e[e.TEMPORARY_RESIDENCE_PERMIT=17]="TEMPORARY_RESIDENCE_PERMIT",e[e.VOTER_ID=18]="VOTER_ID",e[e.WORK_PERMIT=19]="WORK_PERMIT",e[e.iKAD=20]="iKAD",e[e.MILITARY_ID=21]="MILITARY_ID",e[e.MyKAS=22]="MyKAS",e[e.SOCIAL_SECURITY_CARD=23]="SOCIAL_SECURITY_CARD",e[e.HEALTH_INSURANCE_CARD=24]="HEALTH_INSURANCE_CARD",e[e.PASSPORT=25]="PASSPORT",e[e.S_PASS=26]="S_PASS",e[e.COUNT=27]="COUNT"}(Xo||(Xo={})),function(e){e[e.NotAvailable=0]="NotAvailable",e[e.BlackAndWhite=1]="BlackAndWhite",e[e.Color=2]="Color"}(Zo||(Zo={})),function(e){e[e.NotAvailable=0]="NotAvailable",e[e.NotDetected=1]="NotDetected",e[e.Detected=2]="Detected"}(Jo||(Jo={})),function(e){e[e.Success=0]="Success",e[e.DetectionFailed=1]="DetectionFailed",e[e.ImagePreprocessingFailed=2]="ImagePreprocessingFailed",e[e.StabilityTestFailed=3]="StabilityTestFailed",e[e.ScanningWrongSide=4]="ScanningWrongSide",e[e.FieldIdentificationFailed=5]="FieldIdentificationFailed",e[e.MandatoryFieldMissing=6]="MandatoryFieldMissing",e[e.InvalidCharactersFound=7]="InvalidCharactersFound",e[e.ImageReturnFailed=8]="ImageReturnFailed",e[e.BarcodeRecognitionFailed=9]="BarcodeRecognitionFailed",e[e.MrzParsingFailed=10]="MrzParsingFailed",e[e.ClassFiltered=11]="ClassFiltered",e[e.UnsupportedClass=12]="UnsupportedClass",e[e.UnsupportedByLicense=13]="UnsupportedByLicense"}(ei||(ei={})),function(e){e[e.None=0]="None",e[e.MrzId=1]="MrzId",e[e.MrzVisa=2]="MrzVisa",e[e.MrzPassport=3]="MrzPassport",e[e.PhotoId=4]="PhotoId",e[e.FullRecognition=5]="FullRecognition",e[e.Count=6]="Count"}(ti||(ti={})),function(e){e[e.None=0]="None",e[e.AAMVACompliant=1]="AAMVACompliant",e[e.ArgentinaID=2]="ArgentinaID",e[e.ArgentinaDL=3]="ArgentinaDL",e[e.ColombiaID=4]="ColombiaID",e[e.ColombiaDL=5]="ColombiaDL",e[e.NigeriaVoterID=6]="NigeriaVoterID",e[e.NigeriaDL=7]="NigeriaDL",e[e.PanamaID=8]="PanamaID",e[e.SouthAfricaID=9]="SouthAfricaID"}(ni||(ni={}));var ii={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},ai=e.forwardRef((function(t,n){var o=t.align,a=void 0===o?"inherit":o,l=t.classes,s=t.className,u=t.color,c=void 0===u?"initial":u,d=t.component,f=t.display,p=void 0===f?"initial":f,h=t.gutterBottom,m=void 0!==h&&h,g=t.noWrap,y=void 0!==g&&g,v=t.paragraph,b=void 0!==v&&v,w=t.variant,S=void 0===w?"body1":w,k=t.variantMapping,E=void 0===k?ii:k,R=i(t,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),C=d||(b?"p":E[S]||ii[S])||"span";return e.createElement(C,r({className:Sr(l.root,s,"inherit"!==S&&l[S],"initial"!==c&&l["color".concat(Jr(c))],y&&l.noWrap,m&&l.gutterBottom,b&&l.paragraph,"inherit"!==a&&l["align".concat(Jr(a))],"initial"!==p&&l["display".concat(Jr(p))]),ref:n},R))}));const li=Cr((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(ai);var si=br({layout:{position:"relative",display:"flex",alignItems:"center",justifyContent:"center",height:"100%",backgroundColor:"black"},video:{width:"100%",height:"100%"},feedback:{position:"absolute",top:0,left:0,right:0,bottom:0,width:"100%",height:"100%"},center:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",width:"50px",height:"50px",borderRadius:"50%",backgroundColor:"rgba(255, 255, 255, 0.5)",opacity:.5,zIndex:2,"&:after":{content:'" "',position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",display:"block",width:"4px",height:"4px",borderRadius:"50%",backgroundColor:"white"}},centerRed:{backgroundColor:"rgba(255, 0, 0, 0.5)"},hints:{position:"absolute",top:"70%",left:"50%",padding:"8px",transform:"translateX(-50%)",backgroundColor:"white",borderRadius:"5px",opacity:.5,zIndex:2}});const ui=function(t){var n=t.onScanFinish,r=si(),o=(0,e.useState)(""),i=o[0],a=o[1],l=(0,e.useState)(!1),s=l[0],u=l[1],c=(0,e.useRef)(null),d=(0,e.useRef)(null);return(0,e.useEffect)((function(){var e=c.current,t=d.current,r=t.getContext("2d"),o={};function i(){t.width=t.clientWidth,t.height=t.clientHeight,r.clearRect(0,0,t.width,t.height)}var l=!1;function s(e,t){void 0===t&&(t=!1),l||(l=!0,a(e),u(t),window.setTimeout((function(){return l=!1}),1e3))}if(function(){try{if("object"==typeof WebAssembly&&"function"==typeof WebAssembly.instantiate){const e=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));if(e instanceof WebAssembly.Module)return new WebAssembly.Instance(e)instanceof WebAssembly.Instance}}catch(e){return!1}return!1}()){var f="localhost"===location.hostname?"sRwAAAYJbG9jYWxob3N0r/lOPig/w35CpJlWKBU7ZAaA9mjx/8NrH7bVH1L2psm45aZSuI+2s0fHzl79qzKBPRAzrq49R74qsSZkhjiBp5aeDTub1eHitpk+fvJqZkyUjVw3CDKt4h2arM+Hmz5TUWFACxymcgTi2UlEa/2+mSZRWC3xEGLwSFnSV+GJ4vTWT0KkF22SYedavfjEu/3D9qEpVpT/iSXVKgHnjv6EVgOk34oBckcHmpuV3RIGArd8zUZg3Y36yMv523STZh6nB3QxqSQ=":"sRwAAAYSc2VyZ2VybnIuZ2l0aHViLmlv8DLv94gVmsW+e+soPRGL7a1yIs5BdxVCYlGvn/ekcFxQ3AoLy7GObmtHujc58tMkYkWYRCb4Bq7f36v928RmGLzdxpDL/YOm/JXTcwtSQXqznap7nOSJ/9WFnixKbacM6YevPBX+HlElZDJLHKUWnN2D3Cq8gsyG6R0z3cd4tvmgaBxve3tAVIW8gvxjzkJSepeHT1vWusaU3Id2GjcaCycQbFQYYWwKTDf7beLM3azJtmRzDysscw6/FmoFm1lKYEDgIsU=";(function(e){return oo(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{if(!e||"object"!=typeof e)return void n("Missing WASM load settings!");if("string"!=typeof e.licenseKey)return void n("Missing license key!");if(!e.wasmModuleName)return void n("Missing WASM module name!");if("string"!=typeof e.engineLocation)return void n("Setting property 'engineLocation' must be a string!");const r=function(){try{let e=localStorage.getItem("mb-user-id");return null===e&&(e=Ko(),localStorage.setItem("mb-user-id",e)),e}catch(e){return Ko()}}();try{const o=new Blob([String.raw`!function(){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function e(e,t,s,r){return new(s||(s=Promise))((function(n,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,a)}c((r=r.apply(e,t||[])).next())}))}let t=0;class s{constructor(e){this.action=e,this.messageID=function(){const e=t;return t+=1,e}()}}class r extends s{constructor(e,t){super(r.action),this.wasmModuleName=e.wasmModuleName,this.licenseKey=e.licenseKey,this.userId=t,this.registerLoadCallback=null!==e.loadProgressCallback,this.allowHelloMessage=e.allowHelloMessage,this.engineLocation=e.engineLocation}}var n,i,o,a;r.action="init",function(e){e[e.Any=0]="Any",e[e.Recognizer=1]="Recognizer",e[e.RecognizerSettings=2]="RecognizerSettings",e[e.Callback=3]="Callback"}(n||(n={}));class c extends s{constructor(e,t){super(c.action),this.funcName=e,this.params=t}}c.action="invokeFunction";class l extends s{constructor(e,t){super(l.action),this.className=e,this.params=t}}l.action="createNewNativeObject";class u extends s{constructor(e,t,s){super(u.action),this.recognizerHandles=e,this.allowMultipleResults=t,this.registeredMetadataCallbacks=s}}u.action="createRecognizerRunner";class h extends s{constructor(e,t){super(h.action),this.recognizerHandles=e,this.allowMultipleResults=t}}h.action="reconfigureRecognizerRunner";class d extends s{constructor(){super(d.action)}}d.action="deleteRecognizerRunner";class g extends s{constructor(e,t,s){super(g.action),this.objectHandle=e,this.methodName=t,this.params=s}}g.action="invokeObject";class m extends s{constructor(e){super(m.action),this.frame=e}getTransferrables(){return[this.frame.imageData.data.buffer]}}m.action="processImage";class f extends s{constructor(e){super(f.action),this.hardReset=e}}f.action="resetRecognizers";class p extends s{constructor(e){super(p.action),this.registeredMetadataCallbacks=e}}p.action="registerMetadataCallbacks";class R extends s{constructor(e){super(R.action),this.detectionOnlyMode=e}}R.action="setDetectionOnly";class b extends s{constructor(e){super(b.action),this.callbackNonEmpty=e}}b.action="setClearTimeoutCallback";class k extends s{constructor(e){super(k.action),this.cameraPreviewMirrored=e}}k.action="setCameraPreviewMirrored";class y{constructor(e,t,s){this.success=!0,this.error=null,this.messageID=e,this.success=t,this.error=s}}class w{constructor(e,t,s){this.success=!0,this.showOverlay=!0,this.messageID=e,this.showOverlay=s}}class v extends y{constructor(e,t){super(e,!0,null),this.result=t}}class C extends y{constructor(e,t){super(e,!0,null),this.objectHandle=t}}class z extends y{constructor(e,t){super(e,!0,null),this.recognitionState=t}}class E{constructor(e){this.isLoadProgressMessage=!0,this.progress=e}}!function(e){e[e.onDebugText=0]="onDebugText",e[e.onDetectionFailed=1]="onDetectionFailed",e[e.onQuadDetection=2]="onQuadDetection",e[e.onPointsDetection=3]="onPointsDetection",e[e.onFirstSideResult=4]="onFirstSideResult",e[e.clearTimeoutCallback=5]="clearTimeoutCallback",e[e.onGlare=6]="onGlare",e[e.recognizerCallback=7]="recognizerCallback"}(i||(i={}));class M{constructor(e,t){this.isCallbackMessage=!0,this.callbackType=e,this.callbackParameters=t}}function I(e,t){return t=t||"",""===(e=e||"")?t:e.endsWith("/")?t.startsWith("/")?e+t.substring(1):e+t:t.startsWith("/")?e+t:e+"/"+t}!function(e){e[e.Invalid=0]="Invalid",e[e.RequiresServerPermission=1]="RequiresServerPermission",e[e.Valid=2]="Valid"}(o||(o={})),function(e){e.LicenseTokenStateInvalid="LICENSE_TOKEN_STATE_INVALID",e.NetworkError="NETWORK_ERROR",e.RemoteLock="REMOTE_LOCK",e.PermissionExpired="PERMISSION_EXPIRED",e.PayloadCorrupted="PAYLOAD_CORRUPTED",e.PayloadSignatureVerificationFailed="PAYLOAD_SIGNATURE_VERIFICATION_FAILED",e.IncorrectTokenState="INCORRECT_TOKEN_STATE"}(a||(a={}));class S{constructor(e,t){this.code="UNLOCK_LICENSE_ERROR",this.message=null,this.type=e,t&&(this.message=t)}}function x(e){return{licenseId:e.licenseId,licensee:e.licensee,packageName:e.packageName,platform:"Browser",sdkName:e.sdkName,sdkVersion:e.sdkVersion}}var T;function P(t,s){return e(this,void 0,void 0,(function*(){try{const e=yield fetch("https://baltazar.microblink.com/api/v1/status/check",{method:"POST",headers:{"Content-Type":"application/json"},cache:"no-cache",body:JSON.stringify(x(t))});if(e.ok){const t=""+(yield e.text());return s.submitServerPermission(t)}return{status:T.NetworkError,lease:0,networkErrorDescription:"Server responded with status "+e.status}}catch(e){return{status:T.NetworkError,lease:0,networkErrorDescription:"Unexpected error: "+JSON.stringify(e)}}}))}!function(e){e[e.Ok=0]="Ok",e[e.NetworkError=1]="NetworkError",e[e.RemoteLock=2]="RemoteLock",e[e.PermissionExpired=3]="PermissionExpired",e[e.PayloadCorrupted=4]="PayloadCorrupted",e[e.PayloadSignatureVerificationFailed=5]="PayloadSignatureVerificationFailed",e[e.IncorrectTokenState=6]="IncorrectTokenState"}(T||(T={}));new class{constructor(){this.context=self,this.wasmModule=null,this.nativeRecognizerRunner=null,this.objects={},this.nextObjectHandle=0,this.metadataCallbacks={},this.clearTimeoutCallback=null,this.context.onmessage=e=>{const t=e.data;switch(t.action){case r.action:this.processInitMessage(t);break;case c.action:this.processInvokeFunction(t);break;case l.action:this.processCreateNewRecognizer(t);break;case g.action:this.processInvokeObject(t);break;case u.action:this.processCreateRecognizerRunner(t);break;case h.action:this.processReconfigureRecognizerRunner(t);break;case d.action:this.processDeleteRecognizerRunner(t);break;case m.action:this.processImage(t);break;case f.action:this.resetRecognizers(t);break;case R.action:this.setDetectionOnly(t);break;case k.action:this.setCameraPreviewMirrored(t);break;case p.action:this.registerMetadataCallbacks(t);break;case b.action:this.registerClearTimeoutCallback(t);break;default:throw Error("Unknown message action: "+JSON.stringify(t.action))}}}getNextObjectHandle(){const e=this.nextObjectHandle;return this.nextObjectHandle=this.nextObjectHandle+1,e}notifyError(e,t){this.context.postMessage(new y(e.messageID,!1,t))}notifySuccess(e){this.context.postMessage(new y(e.messageID,!0,null))}notifyInitSuccess(e,t){this.context.postMessage(new w(e.messageID,!0,t))}unwrapParameters(e){const t=[];for(const s of e.params){let r=s.parameter;s.type===n.Recognizer?(r=this.objects[r],void 0===r&&this.notifyError(e,"Cannot find object with handle: undefined")):s.type===n.RecognizerSettings&&(r=this.restoreFunctions(r)),t.push(r)}return t}restoreFunctions(e){const t=Object.keys(e);for(const s of t){const t=e[s];"object"==typeof t&&null!==t&&"parameter"in t&&"type"in t&&t.type===n.Callback&&(e[s]=(...e)=>{const s=new M(i.recognizerCallback,[t.parameter].concat(e));this.context.postMessage(s)})}return e}scanForTransferrables(e){if("object"==typeof e){const t=Object.keys(e),s=[];for(const r of t){const t=e[r];t instanceof ImageData?s.push(t.data.buffer):t instanceof Uint8Array?s.push(t.buffer):null!==t&&"object"==typeof t&&s.push(...this.scanForTransferrables(t))}return s}return[]}registerHeartBeat(e){this.unregisterHeartBeat(),this.lease=e;let t=e-Math.floor(Date.now()/1e3);t>120?t-=120:t/=2,this.inFlightHeartBeatTimeoutId=setTimeout(()=>{this.obtainNewServerPermission(!0)},1e3*t)}unregisterHeartBeat(){this.lease&&delete this.lease,this.inFlightHeartBeatTimeoutId&&(clearTimeout(this.inFlightHeartBeatTimeoutId),delete this.inFlightHeartBeatTimeoutId)}obtainNewServerPermission(t){return e(this,void 0,void 0,(function*(){if(this.wasmModule){const e=this.wasmModule.getActiveLicenseTokenInfo(),s=yield P(e,this.wasmModule);switch(s.status){case T.Ok:case T.RemoteLock:this.registerHeartBeat(s.lease);break;case T.NetworkError:case T.PayloadSignatureVerificationFailed:case T.PayloadCorrupted:t?(console.warn("Problem with obtaining server permission. Will attempt in 10 seconds "+T[s.status]),this.inFlightHeartBeatTimeoutId=setTimeout(()=>{this.obtainNewServerPermission(!1)},1e4)):console.error("Problem with obtaining server permission. "+T[s.status]);break;case T.IncorrectTokenState:case T.PermissionExpired:console.error("Internal error: "+T[s.status])}return s.status}return console.error("Internal inconsistency! Wasm module not initialized where it's expected to be!"),T.IncorrectTokenState}))}willSoonExpire(){if(this.lease){if(this.wasmModule.getActiveLicenseTokenInfo().unlockResult===o.Valid){const e=Math.floor(Date.now()/1e3);return 30>this.lease-e}return!0}return!1}processInitMessage(t){let s={locateFile:e=>I(""===t.engineLocation?self.location.origin:t.engineLocation,e)};t.registerLoadCallback&&(s=Object.assign(s,{setStatus:e=>{const t=new E(function(e){if("Running..."===e)return 100;if(0===e.length)return 0;const t=/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/.exec(e);if(t){return 100*parseInt(t[2])/parseInt(t[4])}return NaN}(e));this.context.postMessage(t)}}));try{const r=""===t.engineLocation?self.location.origin:t.engineLocation,n=I(r,t.wasmModuleName+".js");importScripts(n);(0,self[t.wasmModuleName])(s).then(s=>e(this,void 0,void 0,(function*(){const r=yield function(t,s,r,n){return e(this,void 0,void 0,(function*(){const e=n.initializeWithLicenseKey(t,r,s);switch(e.unlockResult){case o.Invalid:return{error:new S(a.LicenseTokenStateInvalid,e.licenseError)};case o.Valid:return{error:null,showOverlay:(i=e.isTrial,c=e.allowRemoveDemoOverlay,l=e.allowRemoveProductionOverlay,!(i&&c||!i&&l))};case o.RequiresServerPermission:{const t=yield P(e,n);switch(t.status){case T.Ok:return{error:null,lease:t.lease};case T.NetworkError:{let e="";return t.networkErrorDescription&&(e=" "+t.networkErrorDescription),{error:new S(a.NetworkError,"There has been a network error while obtaining the server permission!"+e)}}case T.RemoteLock:return{error:new S(a.RemoteLock,"Provided license key has been remotely locked.Please contact support for more information!"),lease:t.lease};case T.PermissionExpired:return{error:new S(a.PermissionExpired,"Internal error (server permission expired)"),lease:t.lease};case T.PayloadCorrupted:return{error:new S(a.PayloadCorrupted,"Server permission payload is corrupted!"),lease:t.lease};case T.PayloadSignatureVerificationFailed:return{error:new S(a.PayloadSignatureVerificationFailed,"Failed to verify server permission's digital signature!"),lease:t.lease};case T.IncorrectTokenState:return{error:new S(a.IncorrectTokenState,"Internal error (Incorrect token state)"),lease:t.lease}}}}var i,c,l}))}(t.licenseKey,t.allowHelloMessage,t.userId,s);null===r.error?(this.wasmModule=s,r.lease?this.registerHeartBeat(r.lease):this.unregisterHeartBeat(),this.notifyInitSuccess(t,!!r.showOverlay)):this.notifyError(t,r.error)})),e=>{this.notifyError(t,e)})}catch(e){this.notifyError(t,e)}}processInvokeFunction(e){if(null===this.wasmModule)return void this.notifyError(e,"WASM module is not initialized!");const t=e.funcName,s=this.unwrapParameters(e);try{const r=this.wasmModule[t](...s);this.context.postMessage(new v(e.messageID,r))}catch(t){this.notifyError(e,t)}}processCreateNewRecognizer(e){if(null===this.wasmModule)return void this.notifyError(e,"WASM module is not initialized!");const t=e.className,s=this.unwrapParameters(e);try{const r=new this.wasmModule[t](...s),n=this.getNextObjectHandle();this.objects[n]=r,this.context.postMessage(new C(e.messageID,n))}catch(t){this.notifyError(e,t)}}getRecognizers(e){const t=[];for(const s of e){t.push(this.objects[s])}return t}processCreateRecognizerRunner(t){return e(this,void 0,void 0,(function*(){if(null===this.wasmModule)this.notifyError(t,"WASM module is not initialized!");else if(null!==this.nativeRecognizerRunner)this.notifyError(t,"Recognizer runner is already created! Multiple instances are not allowed!");else{this.setupMetadataCallbacks(t.registeredMetadataCallbacks);try{if(this.willSoonExpire()){const e=yield this.obtainNewServerPermission(!1);if(e!==T.Ok){const s=T[e];return void this.notifyError(t,new S(a[s],"Cannot initialize recognizers because of invalid server permission: "+s))}}const e=this.getRecognizers(t.recognizerHandles);this.nativeRecognizerRunner=new this.wasmModule.RecognizerRunner(e,t.allowMultipleResults,this.metadataCallbacks),this.notifySuccess(t)}catch(e){this.notifyError(t,e)}}}))}processReconfigureRecognizerRunner(e){if(null===this.wasmModule)this.notifyError(e,"WASM module is not initialized!");else if(null===this.nativeRecognizerRunner)this.notifyError(e,"Recognizer runner is not created! There is nothing to reconfigure!");else try{const t=this.getRecognizers(e.recognizerHandles);this.nativeRecognizerRunner.reconfigureRecognizers(t,e.allowMultipleResults),this.notifySuccess(e)}catch(t){this.notifyError(e,t)}}processDeleteRecognizerRunner(e){if(null!==this.nativeRecognizerRunner)try{this.nativeRecognizerRunner.delete(),this.nativeRecognizerRunner=null,this.notifySuccess(e)}catch(t){this.notifyError(e,t)}else this.notifyError(e,"Recognizer runner is already deleted!")}processInvokeObject(e){try{const t=e.objectHandle,s=e.methodName,r=this.unwrapParameters(e),n=this.objects[t];if(void 0===n)this.notifyError(e,"Cannot find object with handle: "+t);else{const i=n[s](...r),o=this.scanForTransferrables(i);"delete"===s&&delete this.objects[t],this.context.postMessage(new v(e.messageID,i),o)}}catch(t){this.notifyError(e,t)}}processImage(e){if(null!==this.nativeRecognizerRunner)try{const t=this.nativeRecognizerRunner.processImage(e.frame);this.context.postMessage(new z(e.messageID,t))}catch(t){this.notifyError(e,t)}else this.notifyError(e,"Recognizer runner is not initialized! Cannot process image!")}resetRecognizers(e){if(null!==this.nativeRecognizerRunner)try{this.nativeRecognizerRunner.resetRecognizers(e.hardReset),this.notifySuccess(e)}catch(t){this.notifyError(e,t)}else this.notifyError(e,"Recognizer runner is not initialized! Cannot process image!")}setDetectionOnly(e){if(null!==this.nativeRecognizerRunner)try{this.nativeRecognizerRunner.setDetectionOnlyMode(e.detectionOnlyMode),this.notifySuccess(e)}catch(t){this.notifyError(e,t)}else this.notifyError(e,"Recognizer runner is not initialized! Cannot process image!")}setCameraPreviewMirrored(e){if(null!==this.nativeRecognizerRunner)try{this.nativeRecognizerRunner.setCameraPreviewMirrored(e.cameraPreviewMirrored),this.notifySuccess(e)}catch(t){this.notifyError(e,t)}else this.notifyError(e,"Recognizer runner is not initialized! Cannot process image!")}setupMetadataCallbacks(e){e.onDebugText?this.metadataCallbacks.onDebugText=e=>{const t=new M(i.onDebugText,[e]);this.context.postMessage(t)}:delete this.metadataCallbacks.onDebugText,e.onDetectionFailed?this.metadataCallbacks.onDetectionFailed=()=>{const e=new M(i.onDetectionFailed,[]);this.context.postMessage(e)}:delete this.metadataCallbacks.onDetectionFailed,e.onPointsDetection?this.metadataCallbacks.onPointsDetection=e=>{const t=new M(i.onPointsDetection,[e]);this.context.postMessage(t)}:delete this.metadataCallbacks.onPointsDetection,e.onQuadDetection?this.metadataCallbacks.onQuadDetection=e=>{const t=new M(i.onQuadDetection,[e]);this.context.postMessage(t)}:delete this.metadataCallbacks.onQuadDetection,e.onFirstSideResult?this.metadataCallbacks.onFirstSideResult=()=>{const e=new M(i.onFirstSideResult,[]);this.context.postMessage(e)}:delete this.metadataCallbacks.onFirstSideResult,e.onGlare?this.metadataCallbacks.onGlare=e=>{const t=new M(i.onGlare,[e]);this.context.postMessage(t)}:delete this.metadataCallbacks.onGlare}registerMetadataCallbacks(e){if(null!==this.nativeRecognizerRunner){this.setupMetadataCallbacks(e.registeredMetadataCallbacks);try{this.nativeRecognizerRunner.setJSDelegate(this.metadataCallbacks),this.notifySuccess(e)}catch(t){this.notifyError(e,t)}}else this.notifyError(e,"Recognizer runner is not initialized! Cannot process image!")}registerClearTimeoutCallback(e){if(null!==this.nativeRecognizerRunner){this.clearTimeoutCallback=e.callbackNonEmpty?{onClearTimeout:()=>{const e=new M(i.clearTimeoutCallback,[]);this.context.postMessage(e)}}:null;try{this.nativeRecognizerRunner.setClearTimeoutCallback(this.clearTimeoutCallback),this.notifySuccess(e)}catch(t){this.notifyError(e,t)}}else this.notifyError(e,"Recognizer runner is not initialized! Cannot process image!")}}}();
`],{type:"application/javascript"}),i=URL.createObjectURL(o),a=new Worker(i);Mo.createWasmWorker(a,e,r).then((e=>{t(e)}),n)}catch(e){n(e)}}))}))})(new Bo(f)).then((function(a){return l=void 0,u=void 0,d=function(){var l,u,c,d,f,p,h,m,g,y,v,b;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}}(this,(function(w){switch(w.label){case 0:return[4,ri(a)];case 1:return l=w.sent(),[4,oi(a)];case 2:return u=w.sent(),[4,Go(a,[l,u],!1,{onQuadDetection:function(n){return function(n){var o,a,l,u,c,d,f,p;i(),p="#FFFF00FF",0===(f=n).detectionStatus?p="#FF0000FF":1===f.detectionStatus&&(p="#00FF00FF"),r.fillStyle=p,r.strokeStyle=p,r.lineWidth=5,function(e){switch(e.detectionStatus){case po.Fail:s("Scan the front side of a document");break;case po.Success:case po.FallbackSuccess:s("Detection successful");break;case po.CameraAtAngle:s("Adjust the angle",!0);break;case po.CameraTooHigh:s("Move document closer",!0);break;case po.CameraTooNear:case po.DocumentTooCloseToEdge:case po.Partial:s("Move document farther",!0);break;default:console.warn("Unhandled detection status!",e.detectionStatus)}}(n),o=n.transformMatrix,l=0,u=0,c=0,d=0,t.width/t.height>(a=e.videoWidth/e.videoHeight)?(d=a*(c=t.height),l=(t.width-d)/2):(c=(d=t.width)/a,u=(t.height-c)/2),r.translate(l,u),r.scale(d/e.videoWidth,c/e.videoHeight),r.transform(o[0],o[3],o[1],o[4],o[2],o[5]),r.beginPath(),r.moveTo(n.topLeft.x,n.topLeft.y),r.lineTo(n.topRight.x,n.topRight.y),r.lineTo(n.bottomRight.x,n.bottomRight.y),r.lineTo(n.bottomLeft.x,n.bottomLeft.y),r.closePath(),r.stroke()}(n)},onDetectionFailed:function(){return s("Detection failed",!0)}})];case 3:return c=w.sent(),[4,jo.createVideoRecognizerFromCameraStream(e,c)];case 4:return[4,(d=w.sent()).recognize()];case 5:return w.sent()===fo.Empty?[3,8]:[4,l.getResult()];case 6:return(f=w.sent()).state!==fo.Empty&&(console.log("BlinkIDGeneric results",f),y=f.firstName||f.mrz.secondaryID,v=f.lastName||f.mrz.primaryID,b={year:f.dateOfBirth.year||f.mrz.dateOfBirth.year,month:f.dateOfBirth.month||f.mrz.dateOfBirth.month,day:f.dateOfBirth.day||f.mrz.dateOfBirth.day},p={year:f.dateOfExpiry.year||f.mrz.dateOfExpiry.year,month:f.dateOfExpiry.month||f.mrz.dateOfExpiry.month,day:f.dateOfExpiry.day||f.mrz.dateOfExpiry.day},h=f.documentNumber||f.mrz.documentNumber,m=f.nationality||f.mrz.nationalityName,o={firstName:y,lastName:v,dob:b.year+"-"+b.month+"-"+b.day,docNumber:h,docExpiration:p.year+"-"+p.month+"-"+p.day,nationality:m}),[4,u.getResult()];case 7:return(g=w.sent()).state!==fo.Empty&&(console.log("IDBarcode results",g),y=g.firstName,v=g.lastName,b={year:g.dateOfBirth.year,month:g.dateOfBirth.month,day:g.dateOfBirth.day},o={firstName:y,lastName:v,dob:b.year+"-"+b.month+"-"+b.day}),[3,9];case 8:console.warn("Could not extract information!"),w.label=9;case 9:return null==d||d.releaseVideoFeed(),null==c||c.delete(),null==l||l.delete(),null==u||u.delete(),i(),n(o),[2]}}))},new((c=void 0)||(c=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof c?o:new c((function(e){e(o)}))).then(n,r)}o((d=d.apply(l,u||[])).next())}));var l,u,c,d}),(function(e){console.log("Failed to load SDK",e)}))}else console.warn("This browser is not supported by the SDK!")}),[]),e.createElement("div",{className:r.layout},e.createElement("video",{className:r.video,ref:c,playsInline:!0}),e.createElement("canvas",{className:r.feedback,ref:d}),e.createElement("div",{className:r.center+" "+(s?r.centerRed:"")}),i&&e.createElement(li,{className:r.hints},i))},ci=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return t.reduce((function(t,n){var r=n(e);return r?rr(t,r):t}),{})};return r.propTypes={},r.filterProps=t.reduce((function(e,t){return e.concat(t.filterProps)}),[]),r};function di(e,t){return t&&"string"==typeof t?t.split(".").reduce((function(e,t){return e&&e[t]?e[t]:null}),e):null}const fi=function(e){var t=e.prop,n=e.cssProperty,r=void 0===n?e.prop:n,o=e.themeKey,i=e.transform,a=function(e){if(null==e[t])return null;var n=e[t],a=di(e.theme,o)||{};return nr(e,n,(function(e){var t;return"function"==typeof a?t=a(e):Array.isArray(a)?t=a[e]||e:(t=di(a,e)||e,i&&(t=i(t))),!1===r?t:mn({},r,t)}))};return a.propTypes={},a.filterProps=[t],a};function pi(e){return"number"!=typeof e?e:"".concat(e,"px solid")}const hi=ci(fi({prop:"border",themeKey:"borders",transform:pi}),fi({prop:"borderTop",themeKey:"borders",transform:pi}),fi({prop:"borderRight",themeKey:"borders",transform:pi}),fi({prop:"borderBottom",themeKey:"borders",transform:pi}),fi({prop:"borderLeft",themeKey:"borders",transform:pi}),fi({prop:"borderColor",themeKey:"palette"}),fi({prop:"borderRadius",themeKey:"shape"})),mi=ci(fi({prop:"displayPrint",cssProperty:!1,transform:function(e){return{"@media print":{display:e}}}}),fi({prop:"display"}),fi({prop:"overflow"}),fi({prop:"textOverflow"}),fi({prop:"visibility"}),fi({prop:"whiteSpace"})),gi=ci(fi({prop:"flexBasis"}),fi({prop:"flexDirection"}),fi({prop:"flexWrap"}),fi({prop:"justifyContent"}),fi({prop:"alignItems"}),fi({prop:"alignContent"}),fi({prop:"order"}),fi({prop:"flex"}),fi({prop:"flexGrow"}),fi({prop:"flexShrink"}),fi({prop:"alignSelf"}),fi({prop:"justifyItems"}),fi({prop:"justifySelf"})),yi=ci(fi({prop:"gridGap"}),fi({prop:"gridColumnGap"}),fi({prop:"gridRowGap"}),fi({prop:"gridColumn"}),fi({prop:"gridRow"}),fi({prop:"gridAutoFlow"}),fi({prop:"gridAutoColumns"}),fi({prop:"gridAutoRows"}),fi({prop:"gridTemplateColumns"}),fi({prop:"gridTemplateRows"}),fi({prop:"gridTemplateAreas"}),fi({prop:"gridArea"})),vi=ci(fi({prop:"position"}),fi({prop:"zIndex",themeKey:"zIndex"}),fi({prop:"top"}),fi({prop:"right"}),fi({prop:"bottom"}),fi({prop:"left"})),bi=ci(fi({prop:"color",themeKey:"palette"}),fi({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"})),wi=fi({prop:"boxShadow",themeKey:"shadows"});function Si(e){return e<=1?"".concat(100*e,"%"):e}var ki=fi({prop:"width",transform:Si}),Ei=fi({prop:"maxWidth",transform:Si}),Ri=fi({prop:"minWidth",transform:Si}),Ci=fi({prop:"height",transform:Si}),xi=fi({prop:"maxHeight",transform:Si}),Ai=fi({prop:"minHeight",transform:Si});fi({prop:"size",cssProperty:"width",transform:Si}),fi({prop:"size",cssProperty:"height",transform:Si});const Ni=ci(ki,Ei,Ri,Ci,xi,Ai,fi({prop:"boxSizing"}));var Ii=ci(fi({prop:"fontFamily",themeKey:"typography"}),fi({prop:"fontSize",themeKey:"typography"}),fi({prop:"fontStyle",themeKey:"typography"}),fi({prop:"fontWeight",themeKey:"typography"}),fi({prop:"letterSpacing"}),fi({prop:"lineHeight"}),fi({prop:"textAlign"}));function Ti(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}var Oi=function(e){var t=function(t){var n=e(t);return t.css?r(r({},rr(n,e(r({theme:t.theme},t.css)))),function(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}(t.css,[e.filterProps])):n};return t.propTypes={},t.filterProps=["css"].concat(Ze(e.filterProps)),t}(ci(hi,mi,gi,yi,vi,bi,wi,Ni,dr,Ii));const Pi=(Mi=function(t){return function(n){var o,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=a.name,s=i(a,["name"]),u=l,c=fn("function"==typeof n?function(e){return{root:function(t){return n(r({theme:e},t))}}}:{root:n},r({Component:t,name:l||t.displayName,classNamePrefix:u},s));n.filterProps&&(o=n.filterProps,delete n.filterProps),n.propTypes&&(n.propTypes,delete n.propTypes);var d=e.forwardRef((function(n,a){var l=n.children,s=n.className,u=n.clone,d=n.component,f=i(n,["children","className","clone","component"]),p=Sr(c(n).root,s),h=f;if(o&&(h=Ti(h,o)),u)return e.cloneElement(l,r({className:Sr(l.props.className,p)},h));if("function"==typeof l)return l(r({className:p},h));var m=d||t;return e.createElement(m,r({ref:a,className:p},h),l)}));return Er()(d,t),d}}("div"),function(e,t){return Mi(e,r({defaultTheme:vr},t))})(Oi,{name:"MuiBox"});var Mi;const Di=function(t){var n=t.data;return e.createElement(Pi,{p:2},e.createElement(Pi,null,e.createElement(li,{variant:"body2",color:"textSecondary"},"First name"),e.createElement(li,null,n.firstName)),e.createElement(Pi,{mt:2},e.createElement(li,{variant:"body2",color:"textSecondary"},"Last name"),e.createElement(li,null,n.lastName)),e.createElement(Pi,{mt:2},e.createElement(li,{variant:"body2",color:"textSecondary"},"Date of birth"),e.createElement(li,null,n.dob)),e.createElement(Pi,{mt:2},e.createElement(li,{variant:"body2",color:"textSecondary"},"Document number"),e.createElement(li,null,n.docNumber)),e.createElement(Pi,{mt:2},e.createElement(li,{variant:"body2",color:"textSecondary"},"Expiration date"),e.createElement(li,null,n.docExpiration)),e.createElement(Pi,{mt:2},e.createElement(li,{variant:"body2",color:"textSecondary"},"Nationality"),e.createElement(li,null,n.nationality)))};var _i={firstName:"",lastName:"",dob:"",docExpiration:"",docNumber:"",nationality:""};t.render(e.createElement((function(){var t=(0,e.useState)(!0),n=t[0],r=t[1],o=(0,e.useState)(!1),i=o[0],a=o[1],l=(0,e.useState)(!1),s=l[0],u=l[1],c=(0,e.useState)(_i),d=c[0],f=c[1];return n?e.createElement(ro,{onScanStart:function(){r(!1),a(!0)}}):i?e.createElement(ui,{onScanFinish:function(e){f(e),a(!1),u(!0)}}):s?e.createElement(Di,{data:d}):null}),null),document.querySelector("#root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,